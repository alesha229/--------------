const filesContent = {
  "test.js": "// function delay(ms) {\r\n//   return new Promise(function (resolve) {\r\n//     console.log(1); //обработка промиса\r\n//     setTimeout(resolve, ms);\r\n//   });\r\n// }\r\n// // delay(1000).then((result) => {\r\n// //   console.log(result + \"f\");\r\n// // });\r\n\r\n// function delay2(ms, func) {\r\n//   return new Promise(function (resolve) {\r\n//     setTimeout(\r\n//       function () {\r\n//         console.log(2);\r\n//         resolve(func()); //вызов функции выполнение которой задерживается\r\n//       },\r\n\r\n//       ms\r\n//     );\r\n//   });\r\n// }\r\n\r\n// delay2(1000, () => delay(1000));\r\n\r\n// async function fetchData() {\r\n//   try {\r\n//     let response = await fetch(\"https://api.example.com/data\");\r\n//     let data = await response.jsonc;\r\n//     console.log(data);\r\n//   } catch (error) {\r\n//     console.log(error);\r\n//   }\r\n// }\r\n\r\n// fetchData();\r\n// function createCounter() {\r\n//   let count = 0;\r\n//   return {\r\n//     increment() {\r\n//       return count++;\r\n//     },\r\n//     decrement() {\r\n//       return count--;\r\n//     },\r\n//     getValue() {\r\n//       return count;\r\n//     },\r\n//   };\r\n// }\r\n\r\n// // Пример использования:\r\n// const counter = createCounter();\r\n// counter.increment(); // 1\r\n// counter.increment(); // 2\r\n// counter.decrement(); // 1\r\n// counter.getValue(); // 1\r\nfunction createGreeting(name) {\r\n  // это объявление функции = создание лексического окружения, в нем у нас есть name(внутри createGreeting)\r\n\r\n  return function () {\r\n    console.log(`Привет, ${name}`); // при вызове функции createGreeting мы возвращаем функцию но ещё НЕ объявляем функцию!\r\n  };\r\n}\r\n\r\nconst b = function () {\r\n  // функция b объявлена в глобальном лексичеком окружении а не в лексическом окружении createGreeting\r\n  console.log(`Привет, ${name}`);\r\n};\r\n\r\nfunction createGreeting2(name) {\r\n  // так же объявляем функцию и возвращаем функцию b\r\n  // при возврате функции мы не объявляем её внутри createGreeting2 а возвращаем ссылку на функцию которая объявлена в глобальном\r\n  //лексичесом окружении\r\n  return b;\r\n}\r\n\r\nvar name = \"Бла-Бла\"; //задаем name в глобальном лексическом окружении\r\n\r\nconst greetIvan = createGreeting(\"Иван\")();\r\n//() - исполнение функции,\r\n//const greetIvan = createGreeting('Иван') - объявление функции\r\n//как результат работы функции мы получаем ссылку на функцию внутри createGreetitng\r\n//после чего при помощи = мы объявляем её т.е это могло бы выглядит так\r\n//const greetIvan = function () {\r\n//     console.log(`Привет, ${name}`);\r\n// };\r\n//НО! в таком случае мы объявили функцию в глобальном лексическом окружении а не в лексическом окружении createGreeting\r\n//И следствие этого что у нас нет доступа к name лексического окружения createGreeting\r\n\r\n//Да мы объявляем дочернюю функцию и у неё создается СВОЁ лексическоое окружение и если у него нет name то оно ищет его выше и выше\r\n//по иерархии\r\n\r\nconst greetIvan2 = createGreeting2(\"Иван\")();\r\n//() - исполнение функции,\r\n//const greetIvan = createGreeting2('Иван') - объявление функции\r\n//В данном случае объявление в глобальном лексическом окружении происходит(там где было объявлено b)\r\n\r\n//Как послесловие могу сказать что лексическое окружение относится не только к функциям но и к блокам кода таким как if, for\r\n//блок кода это то что находиться внутри {} можно сказать что объявление блока кода = объявлению функции\r\n//это важно понимать особенно для for\r\n\r\nfunction createGreeting3(name) {\r\n  // Лексическое окружение создается ЗДЕСЬ\r\n  // В этот момент \"запоминаются\" все доступные переменные\r\n  return function () {\r\n    console.log(`Привет, ${name}!`);\r\n  };\r\n}\r\n\r\nconst greetIvan3 = createGreeting(\"Иван\");\r\nconst greetMaria = createGreeting(\"Мария\");\r\ngreetIvan3();\r\ngreetMaria();\r\ngreetIvan3();\r\n\r\n// let obj = {\r\n//   names: \"vasya\",\r\n//   withContext(msg = \"default hi!\") {\r\n//     console.log(this.names + \" \" + msg);\r\n//     return this;\r\n//   },\r\n// };\r\n// let diffrentContext = {\r\n//   names: \"applyContext\",\r\n// };\r\n// obj.withContext();\r\n\r\n// let func = obj.withContext;\r\n// func();\r\n// func.apply(obj);\r\n// func.apply(diffrentContext, [\"hello\"]);\r\n// func.call(diffrentContext, \"hello\");\r\n// function ParentPrototype() {\r\n//   this.sayName = function () {\r\n//     console.log(this.name + \" it`s a prototype methon\");\r\n//   };\r\n// }\r\n// function ConstructorPeople(name, age) {\r\n//   this.name = name;\r\n//   this.age = age;\r\n//   this.sayName = function () {\r\n//     console.log(this.name);\r\n//   };\r\n//   prototype = new ParentPrototype();\r\n// }\r\n// ConstructorPeople.prototype = new ParentPrototype();\r\n// let people = new ConstructorPeople(\"vasya\", 18);\r\n// people.sayName();\r\n// new ConstructorPeople(\"maria\").sayName();\r\n\r\nfunction Clouser() {\r\n  let saved = 0; // приватное\r\n  this.saved = saved; //контекст\r\n  return {\r\n    increment: () => {\r\n      saved++;\r\n      this.saved = saved;\r\n      console.log(\r\n        `Saved incremented to: лексическое окружение:${saved} and контекст:${this.saved}`\r\n      );\r\n    },\r\n    getSaved: function () {\r\n      console.log(saved + \" взяли из лексического окружения\"); // Метод для получения значения saved\r\n    },\r\n  };\r\n}\r\nlet func = Clouser();\r\nconst obj2 = {\r\n  rand: function () {\r\n    console.log(Math.random());\r\n  },\r\n};\r\nfunc.increment();\r\nconst obj1 = {\r\n  func: func,\r\n  ___proto___: obj2,\r\n};\r\nconsole.log(obj1.func);\r\nconst obj = {\r\n  logMethod: function () {\r\n    console.log(this.saved + \" взяли из контекста\");\r\n  },\r\n  ___proto___: obj1,\r\n};\r\nconsole.log(obj);\r\nlet prototypedObj = Object.create(obj);\r\nObject.setPrototypeOf(obj, obj1);\r\nprototypedObj.func.increment();\r\nprototypedObj.func.increment();\r\nprototypedObj.func.increment();\r\nprototypedObj.func.increment();\r\nconsole.log(prototypedObj.func.getSaved());\r\nObject.setPrototypeOf(obj1, obj2);\r\nconsole.log(prototypedObj);\r\nprototypedObj.rand();\r\nfunc.getSaved();\r\nfunc.increment();\r\nfunc.getSaved();\r\nfunc.increment();\r\nfunc.increment();\r\nfunc.increment();\r\nfunc.getSaved();\r\nfunc.getSaved();\r\nprototypedObj.logMethod();\r\nlet funcWithoutContext = prototypedObj.logMethod;\r\nfuncWithoutContext.bind(func);\r\nfuncWithoutContext();\r\nfunc.increment();\r\nfuncWithoutContext(); //берем из контекста\r\nfunc.getSaved(); //берем из лексического окружения\r\nfunc.increment;\r\nfuncWithoutContext(); //берем из контекста\r\nfunc.getSaved(); //берем из лексического окружения\r\n",
  "styles.css": ":root {\n  --primary-color: #2c3e50;\n  --secondary-color: #3498db;\n  --background-color: #f5f6fa;\n  --card-background: #ffffff;\n  --text-color: #2c3e50;\n  --code-background: #f8f9fa;\n}\n\nbody {\n  font-family: \"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif;\n  line-height: 1.6;\n  color: var(--text-color);\n  background-color: var(--background-color);\n  margin: 0;\n  padding: 0;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n}\n\nh1 {\n  color: var(--primary-color);\n  text-align: center;\n  margin-bottom: 2rem;\n  font-size: 2.5rem;\n}\n\n.section {\n  margin-bottom: 2rem;\n}\n\nh2 {\n  color: var(--secondary-color);\n  border-bottom: 2px solid var(--secondary-color);\n  padding-bottom: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.card {\n  background-color: var(--card-background);\n  border-radius: 8px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-bottom: 1.5rem;\n  scroll-margin-top: 2rem;\n}\n\nul {\n  list-style-type: none;\n  padding-left: 0;\n}\n\nli {\n  margin-bottom: 0.5rem;\n  padding-left: 1.5rem;\n  position: relative;\n}\n\nli::before {\n  content: \"•\";\n  color: var(--secondary-color);\n  position: absolute;\n  left: 0;\n}\n\ncode {\n  background-color: var(--code-background);\n  padding: 0.2rem 0.4rem;\n  border-radius: 4px;\n  font-family: \"Courier New\", Courier, monospace;\n}\n\npre code {\n  display: block;\n  padding: 1rem;\n  overflow-x: auto;\n  background-color: var(--code-background);\n  border-radius: 6px;\n  margin: 1rem 0;\n}\n\n.principle {\n  margin-bottom: 1.5rem;\n}\n\nh3,\nh4 {\n  color: var(--primary-color);\n  margin-bottom: 0.5rem;\n}\n\nstrong {\n  color: var(--secondary-color);\n}\n\n@media (max-width: 768px) {\n  .container {\n    padding: 1rem;\n  }\n\n  h1 {\n    font-size: 2rem;\n  }\n\n  .card {\n    padding: 1rem;\n  }\n}\n\n.progress-card {\n  max-height: 80vh;\n  overflow-y: auto;\n}\n\n.progress-container {\n  padding: 1rem;\n}\n\n.topic-list {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  margin-bottom: 1.5rem;\n}\n\n.topic-item {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  cursor: pointer;\n  padding: 0.3rem;\n  border-radius: 4px;\n  transition: background-color 0.2s;\n}\n\n.topic-item:hover {\n  background-color: var(--code-background);\n}\n\n.topic-item input[type=\"checkbox\"] {\n  width: 1.2rem;\n  height: 1.2rem;\n  cursor: pointer;\n}\n\n.progress-info {\n  text-align: right;\n  color: var(--secondary-color);\n  font-weight: bold;\n  margin-bottom: 1rem;\n}\n\n.progress-percentage {\n  font-size: 1.2rem;\n}\n\n/* Стили для дневника обучения */\n.diary-container {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.diary-entry {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.diary-date input {\n  padding: 0.5rem;\n  border: 1px solid var(--secondary-color);\n  border-radius: 4px;\n  width: 200px;\n}\n\n.diary-content textarea {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid var(--secondary-color);\n  border-radius: 4px;\n  resize: vertical;\n  font-family: inherit;\n}\n\n.diary-button {\n  background-color: var(--secondary-color);\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 4px;\n  cursor: pointer;\n  align-self: flex-start;\n}\n\n.diary-button:hover {\n  background-color: var(--primary-color);\n}\n\n.diary-history {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.history-entry {\n  border-left: 3px solid var(--secondary-color);\n  padding: 0.5rem 1rem;\n  background-color: var(--code-background);\n  border-radius: 0 4px 4px 0;\n}\n\n.history-date {\n  font-weight: bold;\n  color: var(--secondary-color);\n  margin-bottom: 0.5rem;\n}\n\n.history-content {\n  white-space: pre-wrap;\n}\n\n.export-container {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.table-of-contents {\n  margin-bottom: 2rem;\n}\n\n.table-of-contents ul {\n  list-style: none;\n  padding-left: 0;\n}\n\n.table-of-contents li {\n  margin-bottom: 0.5rem;\n}\n\n.table-of-contents a {\n  color: var(--text-color);\n  text-decoration: none;\n  transition: color 0.2s;\n}\n\n.table-of-contents a:hover {\n  color: var(--secondary-color);\n}\n\n.table-of-contents .toc-h2 {\n  font-weight: bold;\n  margin-top: 1rem;\n}\n\n.table-of-contents .toc-h3 {\n  padding-left: 1.5rem;\n}\n\n.table-of-contents .toc-h4 {\n  padding-left: 3rem;\n  font-size: 0.9em;\n}\n\n/* Добавляем стили для фиксированного бокового меню */\n.page-layout {\n  display: flex;\n  min-height: 100vh;\n}\n\n.sidebar {\n  width: 300px;\n  background-color: var(--card-background);\n  padding: 2rem;\n  position: sticky;\n  top: 0;\n  height: 100vh;\n  overflow-y: auto;\n  box-shadow: 2px 0 4px rgba(0, 0, 0, 0.1);\n\n  /* Базовые стили для скроллбара */\n  scrollbar-width: thin;\n  scrollbar-color: rgba(0, 0, 0, 0.15) transparent;\n}\n\n/* Стили для WebKit (Chrome, Safari, новые версии Edge) */\n.sidebar::-webkit-scrollbar {\n  width: 5px; /* Делаем скроллбар тоньше */\n}\n\n.sidebar::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.sidebar::-webkit-scrollbar-thumb {\n  background-color: rgba(0, 0, 0, 0.15);\n  border-radius: 100px;\n  transition: background-color 0.2s ease;\n}\n\n/* Стили при наведении */\n.sidebar::-webkit-scrollbar-thumb:hover {\n  background-color: rgba(0, 0, 0, 0.25);\n}\n\n/* Стили при активном состоянии (при перетаскивании) */\n.sidebar::-webkit-scrollbar-thumb:active {\n  background-color: rgba(0, 0, 0, 0.35);\n}\n\n.main-content {\n  flex: 1;\n  padding: 2rem;\n}\n\n/* Скрываем дублирующее оглавление в основном контенте */\n.main-content .table-of-contents {\n  display: none;\n}\n\n/* Стили для мобильных устройств */\n@media (max-width: 768px) {\n  .page-layout {\n    flex-direction: column;\n  }\n\n  .sidebar {\n    width: 100%;\n    height: auto;\n    position: static;\n    padding: 1rem;\n  }\n\n  .main-content {\n    padding: 1rem;\n  }\n}\n\n/* Анимация подсветки блока */\n@keyframes highlightFade {\n  0% {\n    background-color: rgba(52, 152, 219, 0.1);\n    transform: scale(1.01);\n  }\n  100% {\n    background-color: transparent;\n    transform: scale(1);\n  }\n}\n\n.highlight-section {\n  animation: highlightFade 2s ease-out;\n  border-radius: 8px;\n  transition: all 0.3s ease;\n}\n\n/* Плавный скролл для всей страницы */\nhtml {\n  scroll-behavior: smooth;\n}\n\n/* Отступ сверху для секций */\nsection.section {\n  scroll-margin-top: 2rem;\n}\n\n/* Добавляем отступ для заголовков внутри карточек */\n.card h2,\n.card h3,\n.card h4 {\n  scroll-margin-top: 2rem;\n}\n\n/* Стили для просмотра файлов */\n.files-container {\n  display: flex;\n  gap: 2rem;\n}\n\n.files-list {\n  flex: 0 0 250px;\n}\n\n.file-content {\n  flex: 1;\n}\n\n.files-tree {\n  list-style: none;\n  padding: 0;\n}\n\n.files-tree .file {\n  padding: 0.5rem;\n  cursor: pointer;\n  border-radius: 4px;\n  transition: background-color 0.2s;\n}\n\n.files-tree .file:hover {\n  background-color: var(--code-background);\n}\n\n.files-tree .file.active {\n  background-color: var(--secondary-color);\n  color: white;\n}\n\n.file-content pre {\n  margin: 0;\n  max-height: 600px;\n  overflow: auto;\n}\n\n.file-content pre code {\n  padding: 1rem;\n}\n",
  "task1.js": "(function () {\r\n  \"use strict\";\r\n})();\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  const checkboxes = document.querySelectorAll(\r\n    '.topic-item input[type=\"checkbox\"]'\r\n  );\r\n  const progressPercentage = document.querySelector(\".progress-percentage\");\r\n\r\n  // Загрузка данных из progress.json\r\n  async function loadProgress() {\r\n    try {\r\n      const response = await fetch(\"progress.json\");\r\n      const progress = await response.json();\r\n\r\n      // Загрузка отмеченных тем\r\n      if (progress.topics) {\r\n        Object.entries(progress.topics).forEach(([topic, isChecked]) => {\r\n          if (isChecked) {\r\n            localStorage.setItem(topic, \"true\");\r\n          }\r\n        });\r\n      }\r\n\r\n      // Загрузка записей дневника\r\n      if (progress.diary) {\r\n        localStorage.setItem(\"diaryEntries\", JSON.stringify(progress.diary));\r\n      }\r\n\r\n      // Обновляем UI\r\n      updateCheckboxes();\r\n      loadEntries();\r\n      updateProgress();\r\n    } catch (error) {\r\n      console.log(\"Не удалось загрузить progress.json:\", error);\r\n    }\r\n  }\r\n\r\n  // Функция обновления чекбоксов\r\n  function updateCheckboxes() {\r\n    checkboxes.forEach((checkbox) => {\r\n      const topic = checkbox.dataset.topic;\r\n      const isChecked =\r\n        localStorage.getItem(topic) === \"true\" ||\r\n        (typeof COMPLETED_TOPICS !== \"undefined\" && COMPLETED_TOPICS[topic]);\r\n      checkbox.checked = isChecked;\r\n    });\r\n  }\r\n\r\n  // Инициализация чекбоксов\r\n  updateCheckboxes();\r\n\r\n  function updateProgress() {\r\n    const total = checkboxes.length;\r\n    const checked = Array.from(checkboxes).filter((cb) => cb.checked).length;\r\n    const percentage = Math.round((checked / total) * 100);\r\n    progressPercentage.textContent = `${percentage}%`;\r\n  }\r\n\r\n  // Начальный подсчет прогресса\r\n  updateProgress();\r\n\r\n  // Инициализация дневника\r\n  const entryDate = document.getElementById(\"entryDate\");\r\n  const entryContent = document.getElementById(\"entryContent\");\r\n  const saveEntry = document.getElementById(\"saveEntry\");\r\n  const entriesHistory = document.getElementById(\"entriesHistory\");\r\n\r\n  // Установка текущей даты\r\n  entryDate.valueAsDate = new Date();\r\n\r\n  // Загрузка истории записей\r\n  function loadEntries() {\r\n    const entries = JSON.parse(localStorage.getItem(\"diaryEntries\") || \"[]\");\r\n    entriesHistory.innerHTML = entries\r\n      .sort((a, b) => new Date(b.date) - new Date(a.date))\r\n      .map(\r\n        (entry) => `\r\n        <div class=\"history-entry\">\r\n          <div class=\"history-date\">${new Date(\r\n            entry.date\r\n          ).toLocaleDateString()}</div>\r\n          <div class=\"history-content\">${formatContent(entry.content)}</div>\r\n        </div>\r\n      `\r\n      )\r\n      .join(\"\");\r\n\r\n    // Подсветка кода после добавления в DOM\r\n    document.querySelectorAll(\".history-entry pre code\").forEach((block) => {\r\n      hljs.highlightBlock(block);\r\n    });\r\n  }\r\n\r\n  // Функция для форматирования контента с кодом\r\n  function formatContent(content) {\r\n    // Заменяем ```js и ```code на ```javascript для единообразия\r\n    content = content.replace(/```(js|code)/g, \"```javascript\");\r\n\r\n    // Если код не обёрнут в маркеры языка, но находится между ```\r\n    content = content.replace(/```\\s*([\\s\\S]*?)```/g, (_, code) => {\r\n      // Проверяем, не начинается ли уже с javascript\r\n      if (!code.trim().startsWith(\"javascript\")) {\r\n        return `\\`\\`\\`javascript${code}\\`\\`\\``;\r\n      }\r\n      return `\\`\\`\\`${code}\\`\\`\\``;\r\n    });\r\n\r\n    // Обрабатываем все блоки кода\r\n    return content.replace(\r\n      /```javascript([\\s\\S]*?)```/g,\r\n      (_, code) =>\r\n        `<pre><code class=\"language-javascript\">${code.trim()}</code></pre>`\r\n    );\r\n  }\r\n\r\n  // Сохранение новой записи\r\n  saveEntry.addEventListener(\"click\", () => {\r\n    const entries = JSON.parse(localStorage.getItem(\"diaryEntries\") || \"[]\");\r\n    entries.push({\r\n      date: entryDate.value,\r\n      content: entryContent.value,\r\n    });\r\n    localStorage.setItem(\"diaryEntries\", JSON.stringify(entries));\r\n\r\n    // Очистка формы\r\n    entryContent.value = \"\";\r\n    entryDate.valueAsDate = new Date();\r\n\r\n    // Обновление истории\r\n    loadEntries();\r\n  });\r\n\r\n  // Начальная загрузка истории\r\n  loadEntries();\r\n\r\n  // Функция для получения всего прогресса\r\n  function getAllProgress() {\r\n    const progress = {\r\n      topics: Array.from(checkboxes).reduce((acc, cb) => {\r\n        if (cb.checked) {\r\n          acc[cb.dataset.topic] = true;\r\n        }\r\n        return acc;\r\n      }, {}),\r\n      diary: JSON.parse(localStorage.getItem(\"diaryEntries\") || \"[]\"),\r\n    };\r\n    return progress;\r\n  }\r\n\r\n  // Добавляем обработчик для кнопки экспорта\r\n  document.getElementById(\"exportProgress\").addEventListener(\"click\", () => {\r\n    const progress = getAllProgress();\r\n    const dataStr = JSON.stringify(progress, null, 2);\r\n\r\n    // Создаем элемент для скачивания\r\n    const downloadEl = document.createElement(\"a\");\r\n    downloadEl.setAttribute(\r\n      \"href\",\r\n      \"data:text/json;charset=utf-8,\" + encodeURIComponent(dataStr)\r\n    );\r\n    downloadEl.setAttribute(\"download\", \"progress.json\");\r\n\r\n    downloadEl.style.display = \"none\";\r\n    document.body.appendChild(downloadEl);\r\n\r\n    downloadEl.click();\r\n    document.body.removeChild(downloadEl);\r\n  });\r\n\r\n  // Загружаем данные из JSON при старте\r\n  loadProgress();\r\n});\r\n",
  "difference.js": "function difference(array, values) {\n    let result = [...array]\n    array.forEach(element => {\n        element = toString(element)\n        values.forEach(value => {\n            value = toString(value)\n            if (element === value){\n                result.splice(result.indexOf(element), 1)\n            }\n        })\n    });\n    return result\n}\n\nfunction check(originalArr, values, expectedArr) {\n    const result = difference(originalArr, values);\n\n    let correct = true;\n    if (result.length != expectedArr.length || !result.every((item, index) => isNaN(item) && isNaN(expectedArr[index]) || item === expectedArr[index])) {\n        correct = false;\n    }\n\n    console.log(`original array: [${originalArr.join(', ')}]`);\n    console.log(`values: [${values.join(', ')}]`);\n    console.log(`expected array: [${expectedArr.join(', ')}]`);\n    console.log(`result: [${result.join(', ')}]`);\n    console.log(`correct: ${correct}`);\n    console.log('');\n}\n\nfunction toString(obj) {\n    if (obj === null) {\n        return 'null';\n    } else if (obj === undefined) {\n        return 'undefined';\n    } else if (isNaN(obj)) {\n        return 'NaN';\n    } else if (obj === '') {\n        return '\\'\\'';\n    } else if (obj === ' ') {\n        return '\\' \\'';\n    }\n\n    return obj;\n} \n\nArray.prototype.join = function(separator) {\n    let result = '';\n\n    for (item of this.values()) {\n        if (!result) {\n            result += toString(item);\n        } else {\n            result += separator + toString(item);\n        }\n    }\n\n    return result;\n}\n\ncheck([0, 1, 2, 3, 4, 4, 4, 0, 0, 6, 7, 8, 8, 10, 10], [4, 1, 2, 0], [3, 6, 7, 8, 8, 10, 10]);\ncheck([], [], []);\n\ncheck([null, \"b\", NaN, 0, 1, undefined, 0, \"c\", 1.2, 3.4, \"g\", +0, +0, NaN], [\"b\", 0, 1.2, NaN], [null, 1, undefined, 'c', 3.4, 'g']);\ncheck([null, \"b\", NaN, 0, 1, undefined, 0, \"c\", 1.2, \"g\", +0, +0, NaN], [\"b\", 0, 1.2, undefined], [null, NaN, 1, 'c', 'g', NaN]);\ncheck([null, \"b\", NaN, 0, 1, undefined, 0, \"c\", 1.2, \"g\", +0, -0, NaN], [\"b\", 0, 1.2, null], [NaN, 1, undefined, 'c', 'g', NaN]);",
  "isEqual.js": "//1.Проверяем равны ли объекты по ссылке\r\n//2.Проверяем примитивные ли типы и сравниваем при помощи ==\r\n//3.Проверяем одинаковые ли типы. Если типы разные делаем проверку разных типов. Number и String к Number. Boolean если один из то приводим к Boolean\r\n//4.У типа object свой алогритм сравнения\r\n//5.Массивы тоже отдельно проверяются\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\nfunction isEqual(value, other) {\r\n  if (value === other) return true;\r\n\r\n  //Проверка на объект-примитив и наоборот\r\n  if (isEqualBoolean1(value, other)) return true;\r\n  if (isEqualBoolean1(other, value)) return true;\r\n  if (isEqualObjectsAndPrimitives1(value, other)) return true;\r\n  if (isEqualObjectsAndPrimitives1(other, value)) return true;\r\n  if (isEqualExeption(other, value)) return true;\r\n\r\n  // Если разный тип, вернуть false\r\n  if (!isEqualTypes1(value, other)) return false;\r\n\r\n  // Проверяем строковые значения (Эта проверка нужна для примитивов!)\r\n  if (!isEqualStringsValue1(value, other)) return false;\r\n\r\n  if (isEqualSymbols1(value, other)) return true;\r\n\r\n  const datesResult = isEqualDates(value, other);\r\n  if (datesResult !== undefined) return datesResult;\r\n\r\n  // if (isEqualMaps1(value, other)) {\r\n  //   let [arrValue, arrOther] = GetValueMaps1(value, other);\r\n  //   return localIsEqual1(arrValue, arrOther);\r\n  // }\r\n\r\n  // if (isEqualSets1(value, other)) {\r\n  //   let [arrValue, arrOther] = GetValueSets1(value, other);\r\n  //   return localIsEqual1(arrValue, arrOther);\r\n  // }\r\n\r\n  // Проверяем значение ключей\r\n  return isEqualObjectsKeys1(value, other);\r\n}\r\nfunction isEqualExeption(value, other) {\r\n  //Number(0) 0\r\n  if (typeof value == \"undefined\" && typeof other == \"undefined\") {\r\n    console.log(value, other);\r\n    return true;\r\n  }\r\n  if (\r\n    value == null &&\r\n    other == null &&\r\n    typeof value !== \"undefined\" &&\r\n    typeof other !== \"undefined\"\r\n  ) {\r\n    console.log(value, other);\r\n\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\nfunction isEqualObjectsAndPrimitives1(value, other) {\r\n  //Number(0) 0\r\n  if (\r\n    typeof value == \"object\" &&\r\n    typeof other != \"object\" &&\r\n    value !== null &&\r\n    other !== null\r\n  ) {\r\n    if (typeof other != \"boolean\") {\r\n      if (value !== null && value == other.valueOf()) return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\nfunction isEqualBoolean1(value, other) {\r\n  //Number(0) 0\r\n  if (typeof value == \"boolean\" && typeof other != \"boolean\") {\r\n    if (value !== null && value.toString() == other.toString()) return true;\r\n  }\r\n  return false;\r\n}\r\nfunction isEqualTypes1(value, other) {\r\n  return typeof value == typeof other;\r\n}\r\nfunction isEqualStringsValue1(value, other) {\r\n  return toString(value) == toString(other);\r\n}\r\nfunction isEqualSymbols1(value, other) {\r\n  if (typeof value == \"symbol\" && typeof other == \"symbol\") {\r\n    return value.toString() == other.toString() ? true : null;\r\n  }\r\n}\r\n// function isEqualTypedArrays1(value, other) {\r\n\r\n// }\r\n// function isEqualMaps1(value, other) {\r\n//   //\r\n// }\r\n// function GetValueMaps1(value, other) {\r\n//   //\r\n// }\r\n// function localIsEqual1(value, other) {\r\n//   //\r\n// }\r\n// function isEqualSets1(value, other) {\r\n//   //\r\n// }\r\n// function GetValueSets1(value, other) {\r\n//   //\r\n// }\r\nfunction isEqualDates(value, other) {\r\n  if (value instanceof Date && other instanceof Date) {\r\n    console.log(value.getTime() == other.getTime());\r\n\r\n    return value.getTime() == other.getTime();\r\n  }\r\n  return undefined;\r\n}\r\nfunction isEqualObjectsKeys1(value, other) {\r\n  if (\r\n    typeof value == \"object\" &&\r\n    typeof other == \"object\" &&\r\n    value !== null &&\r\n    other !== null\r\n  ) {\r\n    if (value.length == other.length) {\r\n      if (Object.keys(value).every((key) => isEqual(value[key], other[key]))) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\nfunction localIsEqual(value, other) {\r\n  // Если ссылаются на одно и то же значение, вернуть true\r\n  if (value === other) return true;\r\n\r\n  //Проверка на объект-примитив и наоборот\r\n  if (isEqualObjectsAndPrimitives(value, other)) return true;\r\n  if (isEqualObjectsAndPrimitives(other, value)) return true;\r\n\r\n  // Если разный тип, вернуть false\r\n  if (!isEqualTypes(value, other)) return false;\r\n\r\n  // Проверяем строковые значения (Эта проверка нужна для примитивов!)\r\n  if (!isEqualStringsValue(value, other)) return false;\r\n\r\n  if (isEqualSymbols(value, other)) return false;\r\n\r\n  if (!isEqualTypedArrays(value, other)) return false;\r\n\r\n  if (isEqualMaps(value, other)) {\r\n    let [arrValue, arrOther] = GetValueMaps(value, other);\r\n    return localIsEqual(arrValue, arrOther);\r\n  }\r\n\r\n  if (isEqualSets(value, other)) {\r\n    let [arrValue, arrOther] = GetValueSets(value, other);\r\n    return localIsEqual(arrValue, arrOther);\r\n  }\r\n\r\n  // Проверяем значение ключей\r\n  return isEqualObjectsKeys(value, other);\r\n}\r\n\r\nfunction isEqualObjectsAndPrimitives(object, primitive) {\r\n  if (typeof object == \"object\" && typeof primitive != \"object\") {\r\n    if (object !== null && primitive === object.valueOf()) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isEqualTypes(value, other) {\r\n  if (typeof value != typeof other) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction isEqualStringsValue(value, other) {\r\n  if (value.toString() != other.toString()) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction isEqualSymbols(symbolValue, symbolOther) {\r\n  return isEqualTypesAndSizeObjects(\r\n    \"[object Symbol]\",\r\n    symbolValue,\r\n    symbolOther\r\n  );\r\n}\r\n\r\nfunction isEqualTypedArrays(arrValue, arrOther) {\r\n  if (ArrayBuffer.isView(arrValue) && ArrayBuffer.isView(arrOther)) {\r\n    if (\r\n      arrValue.length != arrOther.length ||\r\n      arrValue.byteLength != arrOther.byteLength\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction isEqualMaps(mapValue, mapOther) {\r\n  return isEqualTypesAndSizeObjects(\"[object Map]\", mapValue, mapOther);\r\n}\r\n\r\nfunction GetValueMaps(mapValue, mapOther) {\r\n  let arrValue = Array.from(mapValue.entries());\r\n  let arrOther = Array.from(mapOther.entries());\r\n  return [arrValue, arrOther];\r\n}\r\n\r\nfunction isEqualSets(setValue, setOther) {\r\n  return isEqualTypesAndSizeObjects(\"[object Set]\", setValue, setOther);\r\n}\r\n\r\nfunction GetValueSets(setValue, setOther) {\r\n  let arrValue = Array.from(setValue);\r\n  let arrOther = Array.from(setOther);\r\n  return [arrValue, arrOther];\r\n}\r\n\r\nfunction isEqualTypesAndSizeObjects(typeObject, value, other) {\r\n  let objectSet = Object.prototype.toString.call(value);\r\n  if (objectSet == typeObject && value.size == other.size) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isEqualObjectsKeys(objValue, objOther) {\r\n  // Получаем массив ключей объктов\r\n  let valueKeys = Object.keys(objValue);\r\n  let otherKeys = Object.keys(objOther);\r\n\r\n  // Если разное количество ключей, вернуть false\r\n  if (valueKeys.length != otherKeys.length) {\r\n    return false;\r\n  }\r\n  // Проверяем, что у них одинаковые ключи\r\n  if (!valueKeys.every((key) => objOther.hasOwnProperty(key))) {\r\n    return false;\r\n  }\r\n  return valueKeys.every((key) => localIsEqual(objValue[key], objOther[key]));\r\n}\r\n\r\nfunction check(value, other) {\r\n  const result = isEqual(value, other);\r\n  const localResult = localIsEqual(value, other);\r\n\r\n  console.log(`left value: ${JSON.stringify(value)}`);\r\n  console.log(`right value: ${JSON.stringify(other)}`);\r\n  console.log(`expected result: ${localResult}`);\r\n  console.log(`correct: ${result === localResult}`);\r\n  console.log(\"\");\r\n}\r\n\r\ncheck(0, new Number(0));\r\ncheck(\"str\", new String(\"str\"));\r\ncheck(true, new Boolean(true));\r\ncheck(true, new Number(1));\r\ncheck(true, new String(\"1\"));\r\ncheck(new Number(1), new String(\"1\"));\r\ncheck(new String(\"str\"), new String(\"str\"));\r\ncheck(NaN, NaN);\r\ncheck(NaN, null);\r\ncheck(NaN, undefined);\r\ncheck(null, undefined);\r\ncheck(true, false);\r\ncheck(true, true);\r\ncheck(+0, -0);\r\ncheck(\"\", null);\r\ncheck({}, {});\r\ncheck([], []);\r\ncheck(\r\n  {\r\n    a: 1,\r\n    b: 2,\r\n    c: {\r\n      a: \"1\",\r\n      b: true,\r\n      c: {\r\n        a: 1,\r\n        b: 2,\r\n        sayHi() {\r\n          return 5;\r\n        },\r\n      },\r\n    },\r\n  },\r\n  {\r\n    a: 1,\r\n    b: 2,\r\n    c: {\r\n      a: \"1\",\r\n      b: true,\r\n      c: {\r\n        a: 1,\r\n        b: 2,\r\n        sayHi() {\r\n          return 4;\r\n        },\r\n      },\r\n    },\r\n  }\r\n);\r\ncheck(\r\n  { a: 1, b: 2, c: { a: \"1\", b: true, c: { a: 1, b: 2 } } },\r\n  { a: 1, b: 2, c: { a: \"1\", b: true, c: { a: 1, b: 2 } } }\r\n);\r\ncheck(\r\n  [\r\n    {\r\n      artist: \"Billy Joel\",\r\n      title: \"Piano Man\",\r\n      release_year: 1973,\r\n      formats: [\"CS\", \"8T\", \"LP\"],\r\n      gold: true,\r\n    },\r\n    1,\r\n    [3, 2],\r\n    [3, [4]],\r\n  ],\r\n  [\r\n    {\r\n      artist: \"Billy Joel\",\r\n      title: \"Piano Man\",\r\n      release_year: 1973,\r\n      formats: [\"C1\", \"8T\", \"LP\"],\r\n      gold: true,\r\n    },\r\n    1,\r\n    [3, 2],\r\n    [3, [4]],\r\n  ]\r\n);\r\ncheck(\r\n  [\r\n    {\r\n      artist: \"Billy Joel\",\r\n      title: \"Piano Man\",\r\n      release_year: 1973,\r\n      formats: [\"CS\", \"8T\", \"LP\"],\r\n      gold: true,\r\n    },\r\n    1,\r\n    [3, 1],\r\n    [3, [4]],\r\n  ],\r\n  [\r\n    {\r\n      artist: \"Billy Joel\",\r\n      title: \"Piano Man\",\r\n      release_year: 1973,\r\n      formats: [\"CS\", \"8T\", \"LP\"],\r\n      gold: true,\r\n    },\r\n    1,\r\n    [3, 1],\r\n    [3, [4]],\r\n  ]\r\n);\r\ncheck(new Date(\"December 17, 1995 03:24:01\"), new Date(\"1995-12-17T03:24:00\"));\r\ncheck(new Date(\"December 17, 1995 03:24:00\"), new Date(\"1995-12-17T03:24:00\"));\r\n",
  "isEqual1.js": "function isEqual(value, other) {\n    throw new Error('Not implemented!');\n}\n\nfunction localIsEqual(value, other) {\n    // Если ссылаются на одно и то же значение, вернуть true\n    if (value === other) return true;\n\n    //Проверка на объект-примитив и наоборот    \n    if (isEqualObjectsAndPrimitives(value, other)) return true;\n    if (isEqualObjectsAndPrimitives(other, value)) return true;\n\n    // Если разный тип, вернуть false \n    if (!isEqualTypes(value, other)) return false;\n\n    // Проверяем строковые значения (Эта проверка нужна для примитивов!)\n    if (!isEqualStringsValue(value, other)) return false;\n\n    if (isEqualSymbols(value, other)) return false;\n\n    if (!isEqualTypedArrays(value, other)) return false;\n\n    if (isEqualMaps(value, other)) {\n        let [arrValue, arrOther] = GetValueMaps(value, other);\n        return localIsEqual(arrValue, arrOther);\n    }\n\n    if (isEqualSets(value, other)) {\n        let [arrValue, arrOther] = GetValueSets(value, other);\n        return localIsEqual(arrValue, arrOther);\n    }\n\n    // Проверяем значение ключей\n    return isEqualObjectsKeys(value, other);\n\n}\n\nfunction isEqualObjectsAndPrimitives(object, primitive) {\n    if (typeof (object) == 'object' && typeof (primitive) != 'object') {\n        if (object !== null && primitive === object.valueOf()) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction isEqualTypes(value, other) {\n    if (typeof value != typeof other) {\n        return false\n    };\n    return true;\n}\n\nfunction isEqualStringsValue(value, other) {\n    if (value.toString() != other.toString()) {\n        return false;\n    }\n    return true;\n}\n\nfunction isEqualSymbols(symbolValue, symbolOther) {\n    return isEqualTypesAndSizeObjects('[object Symbol]', symbolValue, symbolOther);\n}\n\nfunction isEqualTypedArrays(arrValue, arrOther) {\n    if (ArrayBuffer.isView(arrValue) && ArrayBuffer.isView(arrOther)) {\n        if (arrValue.length != arrOther.length || arrValue.byteLength != arrOther.byteLength) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction isEqualMaps(mapValue, mapOther) {\n    return isEqualTypesAndSizeObjects('[object Map]', mapValue, mapOther);\n}\n\nfunction GetValueMaps(mapValue, mapOther) {\n    let arrValue = Array.from(mapValue.entries());\n    let arrOther = Array.from(mapOther.entries());\n    return [arrValue, arrOther];\n}\n\nfunction isEqualSets(setValue, setOther) {\n    return isEqualTypesAndSizeObjects('[object Set]', setValue, setOther);\n}\n\nfunction GetValueSets(setValue, setOther) {\n    let arrValue = Array.from(setValue);\n    let arrOther = Array.from(setOther);\n    return [arrValue, arrOther];\n}\n\nfunction isEqualTypesAndSizeObjects(typeObject, value, other) {\n    let objectSet = Object.prototype.toString.call(value);\n    if (objectSet == typeObject && value.size == other.size) {\n        return true;\n    }\n    return false;\n}\n\nfunction isEqualObjectsKeys(objValue, objOther) {\n    // Получаем массив ключей объктов\n    let valueKeys = Object.keys(objValue);\n    let otherKeys = Object.keys(objOther);\n\n    // Если разное количество ключей, вернуть false\n    if (valueKeys.length != otherKeys.length) {\n        return false;\n    }\n    // Проверяем, что у них одинаковые ключи\n    if (!valueKeys.every((key) => objOther.hasOwnProperty(key))) {\n        return false;\n    }\n    return valueKeys.every((key) => localIsEqual(objValue[key], objOther[key]));\n}\n\nfunction check(value, other) {\n    const result = isEqual(value, other);\n    const localResult = localIsEqual(value, other);\n\n    console.log(`left value: ${JSON.stringify(value)}`);\n    console.log(`right value: ${JSON.stringify(other)}`);\n    console.log(`expected result: ${localResult}`);\n    console.log(`correct: ${result === localResult}`);\n    console.log('');\n}\n\ncheck(0, new Number(0));\ncheck('str', new String('str'));\ncheck(true, new Boolean(true));\ncheck(true, new Number(1));\ncheck(true, new String(\"1\"));\ncheck(new Number(1), new String(\"1\"));\ncheck(new String('str'), new String('str'));\ncheck(NaN, NaN);\ncheck(NaN, null);\ncheck(NaN, undefined);\ncheck(null, undefined);\ncheck(true, false);\ncheck(true, true);\ncheck(+0, -0);\ncheck(\"\", null);\ncheck({}, {});\ncheck([], []);\ncheck(\n    { a: 1, b: 2, c: { a: \"1\", b: true, c: { a: 1, b: 2, sayHi() { return 5; } } } }, \n    { a: 1, b: 2, c: { a: \"1\", b: true, c: { a: 1, b: 2, sayHi() { return 4; } } } }\n);\ncheck(\n    { a: 1, b: 2, c: { a: \"1\", b: true, c: { a: 1, b: 2 } } },\n    { a: 1, b: 2, c: { a: \"1\", b: true, c: { a: 1, b: 2 } } }\n);\ncheck(\n    [\n        {\n          \"artist\": \"Billy Joel\",\n          \"title\": \"Piano Man\",\n          \"release_year\": 1973,\n          \"formats\": [\n            \"CS\",\n            \"8T\",\n            \"LP\"],\n          \"gold\": true\n        },\n        1,\n        [3, 2],\n        [3, [4]],\n    ],\n    [\n        {\n            \"artist\": \"Billy Joel\",\n            \"title\": \"Piano Man\",\n            \"release_year\": 1973,\n            \"formats\": [\n            \"C1\",\n            \"8T\",\n            \"LP\"],\n            \"gold\": true\n        },\n        1,\n        [3, 2],\n        [3, [4]],\n    ]\n);\ncheck(\n    [\n        {\n          \"artist\": \"Billy Joel\",\n          \"title\": \"Piano Man\",\n          \"release_year\": 1973,\n          \"formats\": [\n            \"CS\",\n            \"8T\",\n            \"LP\"],\n          \"gold\": true\n        },\n        1,\n        [3, 1],\n        [3, [4]],\n    ],\n    [\n        {\n          \"artist\": \"Billy Joel\",\n          \"title\": \"Piano Man\",\n          \"release_year\": 1973,\n          \"formats\": [\n            \"CS\",\n            \"8T\",\n            \"LP\"],\n          \"gold\": true\n        },\n        1,\n        [3, 1],\n        [3, [4]],\n    ]\n);\ncheck(new Date('December 17, 1995 03:24:01'), new Date('1995-12-17T03:24:00'));\ncheck(new Date('December 17, 1995 03:24:00'), new Date('1995-12-17T03:24:00'));",
  "proto.js": "// const calculator = {\r\n//     value: 0,\r\n//     add(n){\r\n//         this.value += n\r\n//         return this\r\n//     },\r\n//     subtract(n){\r\n//         this.value /= n\r\n//         return this\r\n//     },\r\n//     multiply(n){\r\n//         this.value *= n\r\n//         return this\r\n//     }\r\n\r\n// }\r\n// calculator.add(10).multiply(10).subtract(10)\r\n// console.log(calculator.value)\r\n\r\n// function Animal(name){\r\n//     this.name = name\r\n//     this.speak = function(){\r\n//         console.log(`Animal ${this.name} makes a sound`\r\n//         )\r\n//     }\r\n//     this.eat = function(){\r\n//         console.log(`${this.name} is eating`)\r\n//     }\r\n\r\n// }\r\n\r\n// function Dog(name, breed){\r\n// Animal.apply(this, arguments)\r\n// this.name = name\r\n// this.breed = breed\r\n// this.speak = this.speak = function(){\r\n//     console.log(`Animal ${this.name} makes a woof`\r\n//     )\r\n// }\r\n// }\r\n// let dog = new Dog('chuppy', 'buldog')\r\n\r\n//  console.log(dog)\r\n\r\n\r\n\r\n// function Vehicle(brand){\r\n//     this.brand = brand\r\n// }\r\n// function Car(brand, model){\r\n// Vehicle.apply(this, arguments)\r\n     \r\n// this.model = model\r\n// }\r\n// function ElectricCar(brand, model, batteryLife){\r\n// Car.apply(this, arguments)\r\n\r\n// this.batteryLife = batteryLife\r\n// }\r\n\r\n// let ElecCar = new ElectricCar('Honda', 'accorde','500km')\r\n// console.log(ElecCar)\r\n\r\n\r\n\r\n\r\n// const user = {\r\n//     name: \"John\",\r\n//     greetings:[],\r\n//     greet(greeting){\r\n//         this.greetings.push(greeting + \", \"+ this.name)\r\n//     },\r\n//     getAllGreetings(){\r\n//         return console.log(this.greetings)\r\n//     }\r\n// }\r\n\r\n\r\n\r\n// setTimeout(()=>user.greet('hi'), 1000)\r\n\r\n// user.getAllGreetings()\r\n\r\n// console.log(user)\r\n\r\n\r\n\r\n// function BankAccount(initialBalance){\r\n// this._balance = initialBalance\r\n\r\n    \r\n// this.deposit = function(amount){\r\n//     this._balance += amount    \r\n// }\r\n\r\n// this.withdraw = function(amount){\r\n//     this._balance -= amount\r\n// }\r\n// this.getBalance = function(){\r\n//     return this._balance\r\n// }\r\n\r\n// }\r\n\r\n\r\n// let userAcc = new BankAccount(10000)\r\n// userAcc._balance = 0\r\n// console.log(userAcc)\r\n\r\n\r\n// let people = {\r\n//     name :'vasya'\r\n// }\r\n// let message = {\r\n//     message:\"heeelp\",\r\n//     sayHi(){\r\n//         console.log('hi '+this.name)\r\n//     }\r\n// }\r\n\r\n// function log(){\r\n//     console.log(this.message)\r\n// }\r\n// let logWithNewContext = log.bind(message)\r\n// logWithNewContext()\r\n\r\n// let sayHiWithNewContext = message.sayHi.bind(people)\r\n\r\n// sayHiWithNewContext()\r\n\r\n\r\n// let user = {\r\n//     firstName:'Вася',\r\n//     say(phrase){\r\n//         console.log(`${phrase}, ${this.firstName} !`)\r\n//     }\r\n// }\r\n\r\n// let say = user.say.bind(user)\r\n\r\n// say(\"привет\")\r\n// say(\"пока\")\r\n\r\n// function mul(a,b){\r\n//     return a * b\r\n// }\r\n\r\n// let double = mul.bind(null,2)\r\n// console.log(double(3))\r\n// console.log(double(2))\r\n\r\n\r\n// function f(){\r\n//     console.log(this)\r\n// }\r\n\r\n// let user = {\r\n//     g: f.bind(null)\r\n// }\r\n\r\n// user.g()\r\n\r\n\r\n// Контекст связанной функции жёстко фиксирован. Изменить однажды привязанный \r\n// контекст уже нельзя.\r\n\r\n// Так что хоть мы и вызываем user.g(), внутри исходная функция будет вызвана \r\n// с this=null. Однако, функции g совершенно без разницы, какой this она получила. \r\n// Её единственное предназначение – это передать вызов в f вместе с аргументами и ранее \r\n// указанным контекстом null, что она и делает.\r\n\r\n// Таким образом, когда мы запускаем user.g(), исходная функция вызывается с this=null.\r\n\r\n// function f(){\r\n//     console.log(this.name)\r\n// }\r\n\r\n// f = f.bind({name:'Вася'}).bind({name:'Валя'})\r\n// f()\r\n\r\n\r\n// Экзотический объект bound function, возвращаемый при первом вызове f.bind(...), \r\n// запоминает контекст (и аргументы, если они были переданы) только во время создания.\r\n\r\n// Следующий вызов bind будет устанавливать контекст уже для этого объекта.\r\n//  Это ни на что не повлияет.\r\n\r\n// Можно сделать новую привязку, но нельзя изменить существующую\r\n\r\n\r\n// function askPassword(ok, fail){\r\n//     let password = prompt(\"Password?\", '')\r\n//     if(password == \"rockstart\") ok()\r\n//         else fail()\r\n// }\r\n\r\n\r\n// let user = {\r\n//     name:'Вася',\r\n\r\n//     loginOk(){\r\n//         console.log(this.name + 'logged')\r\n//     },\r\n//     loginFail(){\r\n//         console.log(this.name + \"logged out\")\r\n//     },\r\n// }\r\n\r\n\r\n\r\n// askPassword(user.loginOk.bind(user), user.loginFail.bind(user))\r\n\r\n\r\nfunction askPassword(ok, fail){\r\n    let password = prompt(\"Password?\", '')\r\n    if(password == \"rockstart\") ok()\r\n        else fail()\r\n}\r\n\r\n\r\nlet user = {\r\n    name:'Вася',\r\n\r\n   login(result){\r\n    console.log(this.name + (result ? 'logged in': 'failed to log in'))\r\n   }\r\n}\r\n\r\n\r\n\r\naskPassword(user.login.bind(user,true), user.login.bind(user,false))\r\n\r\n\r\n\r\n// const timer = {\r\n//     seconds: 0,\r\n//     interval: null,\r\n    \r\n//     start() {\r\n//         // this.interval = setInterval(() => {\r\n//         //     this.seconds++\r\n//         //     console.log(this.seconds)\r\n//         // }, 1000)\r\n\r\n//         this.interval =  setInterval(function (){\r\n//             this.second++\r\n//             console.log(this.seconds)\r\n//         },1000)\r\n//     },\r\n    \r\n//     stop() {\r\n//         clearInterval(this.interval)\r\n//     }\r\n// }\r\n\r\n// timer.start()",
  "sortedUniq.js": "function sortedUniq(array) {\r\n  array.map((element, index) => {\r\n    while (array.includes(element, index + 1)) {\r\n      array.splice(\r\n        array.findLastIndex(\r\n          (e) =>\r\n            e === element ||\r\n            !(e !== element) ||\r\n            exeptionTypesHandler(e) === exeptionTypesHandler(element)\r\n        ),\r\n        1\r\n      );\r\n    }\r\n  });\r\n  return array;\r\n}\r\n\r\nfunction exeptionTypesHandler(a) {\r\n  if (!a) {\r\n    if (typeof a === \"undefined\") {\r\n      return String(\"undefiend\");\r\n    } else if (a === null) {\r\n      return String(\"null\");\r\n    } else if (a === 0) {\r\n      return Number(\"0\");\r\n    } else if (a === 1) {\r\n      return Number(\"1\");\r\n    } else if (a === \"\") {\r\n      return String(\"\");\r\n    } else if (a === \" \") {\r\n      return String(\" \");\r\n    } else if (a === NaN) {\r\n      return String(\"NaN\");\r\n    }\r\n  } else {\r\n    return a;\r\n  }\r\n}\r\nfunction check(originalArr, expectedArr) {\r\n  const result = sortedUniq(originalArr);\r\n\r\n  let correct = true;\r\n  if (\r\n    result.length != expectedArr.length ||\r\n    !result.every(\r\n      (item, index) =>\r\n        (isNaN(item) && isNaN(expectedArr[index])) ||\r\n        item === expectedArr[index]\r\n    )\r\n  ) {\r\n    correct = false;\r\n  }\r\n\r\n  console.log(`original array: [${originalArr.join(\", \")}]`);\r\n  console.log(`expected array: [${expectedArr.join(\", \")}]`);\r\n  console.log(`result: [${result.join(\", \")}]`);\r\n  console.log(`correct: ${correct}`);\r\n  console.log(\"\");\r\n}\r\n\r\nfunction toString(obj) {\r\n  if (obj === null) {\r\n    return \"null\";\r\n  } else if (obj === undefined) {\r\n    return \"undefined\";\r\n  } else if (isNaN(obj)) {\r\n    return \"NaN\";\r\n  } else if (obj === \"\") {\r\n    return \"''\";\r\n  } else if (obj === \" \") {\r\n    return \"' '\";\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\nArray.prototype.join = function (separator) {\r\n  let result = \"\";\r\n\r\n  for (item of this.values()) {\r\n    if (!result) {\r\n      result += toString(item);\r\n    } else {\r\n      result += separator + toString(item);\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\ncheck([1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 6], [1, 2, 3, 4, 5, 6]);\r\ncheck(\r\n  [\r\n    null,\r\n    null,\r\n    undefined,\r\n    undefined,\r\n    NaN,\r\n    NaN,\r\n    NaN,\r\n    1,\r\n    1,\r\n    \"\",\r\n    \"\",\r\n    0,\r\n    0,\r\n    \" \",\r\n    \" \",\r\n  ],\r\n  [null, undefined, NaN, 1, \"\", 0, \" \"]\r\n);\r\ncheck([1, 2, 2], [1, 2]);\r\n",
  "sortedUniq1.js": "let array = [\r\n  \"chemistry\",\r\n  \"computer\",\r\n  \"computer\",\r\n  \"english\",\r\n  \"geography\",\r\n  \"hindi\",\r\n  \"hindi\",\r\n  \"geography\",\r\n  \"maths\",\r\n  \"physics\",\r\n  \"a\",\r\n  \"physics\",\r\n  \"physics\",\r\n  \"a\",\r\n  \"physics\",\r\n  \"physics\",\r\n  \"a\",\r\n  \"physics\",\r\n  \"physics\",\r\n  ,\r\n];\r\n\r\n// array.splice(8, 1);\r\n// console.log(array);\r\n// function sortedUniq(array) {\r\n//   for (i in array) {\r\n//     let isFirst = false;\r\n//     for (b in array) {\r\n//       if (array[i] == array[b]) {\r\n//         if (isFirst) {\r\n//           array.splice(b, 1);\r\n//         }\r\n//         isFirst = true;\r\n//       }\r\n//     }\r\n//     console.log(array);\r\n//     isFirst = false;\r\n//   }\r\n//   return array;\r\n// }\r\n\r\n// function sortedUniq(array) {\r\n//   let unicArray = [];\r\n//   array.map((element, index) => {\r\n//     if (!array.includes(element, index + 1)) {\r\n//       unicArray.push(element);\r\n//     }\r\n//   });\r\n//   return unicArray;\r\n// }\r\n\r\nfunction sortedUniq(array) {\r\n  array.map((element, index) => {\r\n    // if (array.includes(element, index + 1)) {\r\n    //   unicArray.push(element);\r\n    // }else{\r\n    //   unicArray.push(element);\r\n    // }\r\n    while (array.includes(element, index + 1)) {\r\n      array.splice(\r\n        array.findLastIndex((e) => e == element),\r\n        1\r\n      );\r\n    }\r\n  });\r\n  return array;\r\n}\r\n\r\nconsole.log(sortedUniq(array));\r\n",
  "task3.js": "let answer1 = prompt(\"какое официальное название использует javascipt\");\r\nif (answer1 == \"ECMAScript\") {\r\n  alert(\"правильно\");\r\n} else {\r\n  alert(\"Не знаете? ECMAScript!\");\r\n}\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\nlet promtAnswer = promt(\"Введите любое число\");\r\nif (promtAnswer > 0) {\r\n  alert(\"1\");\r\n} else if (promtAnswer < 0) {\r\n  alert(\"-1\");\r\n} else {\r\n  alert(\"0\");\r\n}\r\n//\r\n//ok\r\n//\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\nlet result;\r\nif (a + b < 4) {\r\n  result = \"Мало\";\r\n} else {\r\n  result = \"Много\";\r\n}\r\n\r\n//|\r\n//v\r\n\r\nresult = a + b < 4 ? \"Много\" : \"Мало\";\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nlet message;\r\n\r\nif (login == \"Сотрудник\") {\r\n  message = \"Привет\";\r\n} else if (login == \"Директор\") {\r\n  message = \"Здравствуйте\";\r\n} else if (login == \"\") {\r\n  message = \"Нет логина\";\r\n} else {\r\n  message = \"\";\r\n}\r\n\r\n//|\r\n//v\r\n\r\nmessage =\r\n  login == \"Сотрудник\"\r\n    ? (message = \"Привет\")\r\n    : login == \"Директор\"\r\n    ? (message = \"Здравствуйте\")\r\n    : login == \"\"\r\n    ? (message = \"Нет логина\")\r\n    : (message = \"\");\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nswitch (browser) {\r\n  case \"Edge\":\r\n    alert(\"You've got the Edge!\");\r\n    break;\r\n\r\n  case \"Chrome\":\r\n  case \"Firefox\":\r\n  case \"Safari\":\r\n  case \"Opera\":\r\n    alert(\"Okay we support these browsers too\");\r\n    break;\r\n\r\n  default:\r\n    alert(\"We hope that this page looks ok!\");\r\n}\r\n\r\n//|\r\n//v\r\n\r\nif (browser == \"Edge\") {\r\n  alert(\"You`ve got the Edge!\");\r\n} else if (\"Chrome\") {\r\n} else if (\"Firefox\") {\r\n} else if (\"Safari\") {\r\n} else if (\"Opera\") {\r\n  alert(\"Okay we support these browsers too\");\r\n} else {\r\n  alert(\"We hope that this page looks ok!\");\r\n}\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\nconst number = +promt(\"Введите число между 0 и 3\", \"\");\r\nif (number === 0) {\r\n  alert(\"Вы ввели число 0\");\r\n}\r\nif (number === 1) {\r\n  alert(\"Вы ввели число 1\");\r\n}\r\nif (number === 2 || number === 3) {\r\n  alert(\"Вы ввели число 2, а может и 3\");\r\n}\r\n\r\n//|\r\n//v\r\n\r\nswitch (number) {\r\n  case value:\r\n    alert(\"Вы ввели число 0\");\r\n    break;\r\n  case 1:\r\n    alert(\"Вы ввели число 1\");\r\n    break;\r\n  case 2:\r\n  case 3:\r\n    alert(\"Вы ввели число 2, а может и 3\");\r\n}\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nfunction checkAge(age) {\r\n  if (age > 18) {\r\n    return true;\r\n  } else {\r\n    return comfirm(\"Родители разрешили?\");\r\n  }\r\n}\r\n\r\nfunction checkAge1(age) {\r\n  if (age > 18) {\r\n    return true;\r\n  }\r\n  return confirm(\"Ротдители разрешили?\");\r\n}\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\nfunction checkAge2() {\r\n  if (age > 18) {\r\n    return true;\r\n  } else confirm(\"Родители разрешили?\");\r\n}\r\nfunction checkAge(age) {\r\n  return age > 18 ? true : confirm(\"Родители разрешили\");\r\n}\r\nfunction min(a, b) {\r\n  if (a < b) {\r\n    return a;\r\n  } else {\r\n    return b;\r\n  }\r\n}\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nfunction pow(x, n) {\r\n  let result = x;\r\n  for (let i = 1; i < n; ) {\r\n    result *= x;\r\n  }\r\n  return result;\r\n}\r\nlet x = prompt(\"x?\", \"\");\r\nlet n = prompt(\"n?\", \"\");\r\nif (n >= 1 && n % 1 === 0) {\r\n  alert(pow(x, n));\r\n} else {\r\n  alert(`Степень ?${n} не поддерживается, используйте натуральное число`);\r\n}\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nfunction ask(question, yes, no) {\r\n  if (confirm(question)) yes();\r\n  else no();\r\n}\r\nask(\r\n  \"Вы согласны?\",\r\n  function () {\r\n    alert(\"Вы согласились.\");\r\n  },\r\n  function () {\r\n    alert(\"Вы отменили выполнение.\");\r\n  }\r\n);\r\n\r\n//|\r\n//v\r\nlet func = (question, yes, no) => {\r\n  if (confirm(question)) yes();\r\n  else no();\r\n};\r\nfunc(\r\n  \"Вы согласны?\",\r\n  () => alert(\"Вы согласились.\"),\r\n  () => alert(\"Вы отменили выполнение.\")\r\n);\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nuser = {\r\n  name: \"John\",\r\n  surname: \"Smith\",\r\n};\r\nuser.name = \"Pete\";\r\ndelete user.name;\r\n\r\nlet schedule = {};\r\n\r\nlet isEmpty = (obj) => {\r\n  return obj.lenght > 0 ? true : false;\r\n};\r\n\r\nalert(isEmpty(schedule));\r\n\r\nschedule[\"8:30\"] = \"get up\";\r\n\r\nalert(isEmpty(schedule));\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nconst user = {\r\n  name: \"Jogn\",\r\n};\r\n\r\nuser.name = \"Pete\";\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nlet salaries = {\r\n  John: 100,\r\n  Ann: 160,\r\n  Pete: 130,\r\n};\r\nlet sumObject = (obj) => {\r\n  let sum = 0;\r\n  for (let key in obj) {\r\n    sum += obj[key];\r\n  }\r\n};\r\nsumObject(salaries);\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nmultiplyNumeric = (obj) => {\r\n  for (let key in obj) {\r\n    if (obj.key.typeof == \"number\") {\r\n      obj.key *= 2;\r\n    }\r\n  }\r\n};\r\nlet menu = {\r\n  width: 200,\r\n  height: 300,\r\n  title: \"My menu\",\r\n};\r\nmultiplyNumeric(menu);\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nfunction marry(man, woman) {\r\n  woman.husband = man;\r\n  man.wife = woman;\r\n  return {\r\n    father: man,\r\n    mother: woman,\r\n  };\r\n}\r\n\r\nlet family = marry(\r\n  {\r\n    name: \"John\",\r\n  },\r\n  {\r\n    name: \"Ann\",\r\n  }\r\n);\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nlet user = { name: \"John\" };\r\nlet admin = { name: \"Admin\" };\r\n\r\nfunction sayHi() {\r\n  alert(this.name);\r\n}\r\n\r\nuser.f = sayHi;\r\nadmin.f = sayHi;\r\n\r\nuser.f(); //john\r\nadmin.f(); //admin\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nfunction makeUser() {\r\n  return {\r\n    name: \"John\",\r\n    ref: this,\r\n  };\r\n}\r\n\r\nlet user = makeUser();\r\n\r\nalert(user.ref.name); // error\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nlet calculator = {\r\n  read(a) {\r\n    this.a = a;\r\n    this.b = b;\r\n  },\r\n  sum() {\r\n    return this.a + this.b;\r\n  },\r\n  mul() {\r\n    return this.a * this.b;\r\n  },\r\n};\r\n\r\ncalculator.read();\r\nalert(calculator.sum());\r\nalert(calculator.mul());\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nlet ladder = {\r\n  step: 0,\r\n  up() {\r\n    this.step++;\r\n    return this;\r\n  },\r\n  down() {\r\n    this.step--;\r\n    return this;\r\n  },\r\n  showStep: function () {\r\n    alert(this.step);\r\n    return this;\r\n  },\r\n};\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n//Это функция конструктор\r\n//На самом деле это обычная функция но есть соглашение что\r\n//функция-конструктор вызывается только с помощью оператора new\r\n//наименование обязательно с большой буквый\r\n//Все кроме стрелочных функций можно использовать с new как конструктор\r\n//Так как внутри стрелочной функции нет this\r\n\r\n//\r\n//Что делает new на самом деле\r\n//\r\n// function User(){\r\n//   this = {}\r\n//   this.name = name\r\n//   this.isAdmin = false\r\n//   return this\r\n// }\r\n//\r\n\r\nfunction User() {\r\n  this.name = name;\r\n  this.isAdmin = false;\r\n}\r\n\r\nlet user = new User(\"Jack\");\r\n\r\nalert(user.name);\r\nalert(user.isAdmin);\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nfunction User(name) {\r\n  this.name = name;\r\n\r\n  this.sayHi = function () {\r\n    alert(\"Меня зовут\" + this.name);\r\n  };\r\n}\r\nlet john = new User(\"John\");\r\n\r\njohn.sayHi();\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\nlet obj = {};\r\n\r\nfunction A() {\r\n  return obj;\r\n}\r\nfunction B() {\r\n  return obj;\r\n}\r\n\r\nlet a = new A();\r\nlet b = new B();\r\n\r\nalert(a == b);\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\nfunction Calculator() {\r\n  this.read = function () {\r\n    this.a = promt(\"Введите число a\");\r\n    this.b = promt(\"Введите число б\");\r\n  };\r\n  this.sum = function () {\r\n    return this.a + this.b;\r\n  };\r\n  this.mul = function () {\r\n    return this.a * this.b;\r\n  };\r\n}\r\n\r\nlet calculator1 = new Calculator();\r\ncalculator1.read();\r\n\r\nalert(\"Sum=\" + calculator1.sum());\r\nalert(\"Mul=\" + calculator1.mul());\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\nfunction Accumulator(startingValue) {\r\n  this.value = startingValue;\r\n  this.read = function () {\r\n    this.value += promt(\"Введите число\");\r\n  };\r\n}\r\n\r\nlet accumulator = new Accumulator(1);\r\n\r\naccumulator.read();\r\naccumulator.read();\r\n\r\nalert(accumulator.value);\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nlet user = {\r\n  name: \"John\",\r\n  money: 1000,\r\n  [Symbol.toPrimitive](hint) {\r\n    alert(`hint: ${hint}`);\r\n    return hint == \"string\" ? `name:\"${this.name}\"` : this.money;\r\n  },\r\n};\r\n// демонстрация результатов преобразований:\r\nalert(user); // hint: string -> {name: \"John\"}\r\nalert(+user); // hint: number -> 1000\r\nalert(user + 500); // hint: default -> 1500\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nlet user = {\r\n  name: \"John\",\r\n  money: 1000,\r\n  toString() {\r\n    return `{name:\"${this.name}\"}`;\r\n  },\r\n  valueOf() {\r\n    return this.money;\r\n  },\r\n};\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n",
  "task4.js": "let str = \"Привет\";\r\n\r\nstr.test = 5;\r\n\r\nalert(str); // Привет // неправильно выдаст ошибку\r\n\r\n// В зависимости от того, используете ли вы строгий режим (use strict) или нет, результат может быть:\r\n\r\n// undefined (без strict)\r\n// Ошибка (strict mode)\r\n// Почему? Давайте посмотрим что происходит в строке кода, отмеченной (*):\r\n\r\n// В момент обращения к свойству str создаётся «объект-обёртка».\r\n// В строгом режиме, попытка изменения этого объекта выдаёт ошибку.\r\n// Без строгого режима, операция продолжается, объект получает свойство test, но после этого он удаляется, так что на последней линии str больше не имеет свойства test.\r\n// Данный пример наглядно показывает, что примитивы не являются объектами.\r\n\r\n// Они не могут хранить дополнительные данные.\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nlet a = +promt(\"Введите число а\");\r\n\r\nlet b = +promt(\"Введите число b\");\r\n\r\nalert(a + b);\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nalert(Math.round((6.35 * 10) / 10));\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nfunction readNumber() {\r\n  let a;\r\n\r\n  do {\r\n    prompt(\"Введите число\");\r\n  } while (!isFinite(a));\r\n  if (a == null || num == \"\") return +a;\r\n}\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nfunction random(min, max) {\r\n  return min + Math.random() * (max - min);\r\n}\r\nrandom(1, 10);\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nfunction randInteger(min, max) {\r\n  Math.round((min + Math.random() * (max - min)) * 10); // неправильно\r\n\r\n  let rand = min + Math.random() * (max + 1 - min);\r\n  return Math.floor(rand);\r\n}\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nfunction ucFirst(str) {\r\n  const firstSimbol = str.at(0).toUpperCase();\r\n  return firstSimbol + str.slice(1);\r\n}\r\nconsole.log(ucFirst(\"Вася\"));\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n\r\nfunction checkSpam(str) {\r\n  const lowerCase = toLowerCase(str);\r\n  switch (lowerCase) {\r\n    case \"viagra\":\r\n      return true;\r\n    case \"xxx\":\r\n      return true;\r\n\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\n//\r\n//----------------------------------------------------------------------\r\n//\r\n",
  "index.html": "<!DOCTYPE html>\n<html lang=\"ru\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Основы JavaScript</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css\"\n    />\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n    <script>\n      hljs.highlightAll();\n    </script>\n    <script src=\"completed-topics.js\"></script>\n    <script src=\"task1.js\"></script>\n    <script>\n      // Функция для генерации оглавления\n      function generateTableOfContents() {\n        const toc = document.getElementById(\"toc\");\n        const headings = document.querySelectorAll(\"h2, h3, h4\");\n        const ul = document.createElement(\"ul\");\n\n        headings.forEach((heading, index) => {\n          // Пропускаем заголовки из прогресса обучения\n          if (heading.closest(\".progress-card\")) {\n            return;\n          }\n\n          // Пропускаем заголовок самого оглавления\n          if (heading.parentElement.classList.contains(\"table-of-contents\")) {\n            return;\n          }\n\n          // Создаем уникальный id для заголовка, если его нет\n          if (!heading.id) {\n            heading.id = `heading-${index}`;\n          }\n\n          const li = document.createElement(\"li\");\n          const a = document.createElement(\"a\");\n\n          a.href = `#${heading.id}`;\n          a.textContent = heading.textContent;\n          a.classList.add(`toc-${heading.tagName.toLowerCase()}`);\n\n          // Добавляем обработчик клика для плавного скролла\n          a.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            const targetHeading = document.getElementById(heading.id);\n            const targetSection =\n              targetHeading.closest(\".card\") ||\n              targetHeading.closest(\"section\");\n\n            // Добавляем отступ при скролле\n            window.scrollTo({\n              top: targetHeading.offsetTop - 100, // 100px отступ сверху\n              behavior: \"smooth\",\n            });\n\n            // Добавляем подсветку всего блока\n            if (targetSection) {\n              targetSection.classList.add(\"highlight-section\");\n              setTimeout(() => {\n                targetSection.classList.remove(\"highlight-section\");\n              }, 2000);\n            }\n          });\n\n          li.appendChild(a);\n          ul.appendChild(li);\n        });\n\n        toc.appendChild(ul);\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        generateTableOfContents();\n      });\n\n      // Функция для загрузки прогресса\n      async function loadProgress() {\n        try {\n          // Сначала пробуем загрузить из progress.json\n          const response = await fetch(\"progress.json\");\n          if (response.ok) {\n            const data = await response.json();\n            return data;\n          }\n        } catch (error) {\n          console.log(\n            \"Не удалось загрузить progress.json, используем localStorage\"\n          );\n        }\n\n        // Если не удалось загрузить из JSON, берем из localStorage\n        const savedProgress = localStorage.getItem(\"learningProgress\");\n        if (savedProgress) {\n          return JSON.parse(savedProgress);\n        }\n\n        // Если нигде нет данных, возвращаем пустой объект\n        return {};\n      }\n\n      // Функция для сохранения прогресса\n      function saveProgress(progress) {\n        localStorage.setItem(\"learningProgress\", JSON.stringify(progress));\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", async () => {\n        const progress = await loadProgress();\n\n        // Отмечаем изученные темы\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        checkboxes.forEach((checkbox) => {\n          const topic = checkbox.dataset.topic;\n          if (progress[topic]) {\n            checkbox.checked = true;\n          }\n\n          checkbox.addEventListener(\"change\", () => {\n            progress[topic] = checkbox.checked;\n            saveProgress(progress);\n            updateProgress();\n          });\n        });\n\n        updateProgress();\n      });\n\n      // Обновление процента прогресса\n      function updateProgress() {\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        const total = checkboxes.length;\n        const checked = Array.from(checkboxes).filter(\n          (cb) => cb.checked\n        ).length;\n        const percentage = Math.round((checked / total) * 100);\n\n        const progressInfo = document.querySelector(\".progress-info\");\n        if (progressInfo) {\n          progressInfo.innerHTML = `\n            <div class=\"progress-percentage\">${percentage}%</div>\n            <div>изучено</div>\n          `;\n        }\n      }\n\n      // Инициализация подсветки кода\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        document.querySelectorAll(\"pre code\").forEach((block) => {\n          hljs.highlightBlock(block);\n        });\n      });\n\n      // Работа с дневником\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const saveButton = document.getElementById(\"saveEntry\");\n        const dateInput = document.getElementById(\"entryDate\");\n        const contentInput = document.getElementById(\"entryContent\");\n        const historyContainer = document.getElementById(\"diaryHistory\");\n\n        // Установка текущей даты\n        const today = new Date().toISOString().split(\"T\")[0];\n        dateInput.value = today;\n\n        // Загрузка истории из localStorage\n        function loadHistory() {\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          historyContainer.innerHTML = \"\";\n\n          history\n            .sort((a, b) => new Date(b.date) - new Date(a.date))\n            .forEach((entry) => {\n              const entryElement = document.createElement(\"div\");\n              entryElement.className = \"history-entry\";\n              entryElement.innerHTML = `\n                    <div class=\"history-date\">${new Date(\n                      entry.date\n                    ).toLocaleDateString()}</div>\n                    <div class=\"history-content\">${entry.content}</div>\n                  `;\n              historyContainer.appendChild(entryElement);\n            });\n        }\n\n        // Сохранение записи\n        saveButton.addEventListener(\"click\", () => {\n          const date = dateInput.value;\n          const content = contentInput.value;\n\n          if (!content.trim()) {\n            alert(\"Пожалуйста, введите текст записи\");\n            return;\n          }\n\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          history.push({ date, content });\n          localStorage.setItem(\"diaryHistory\", JSON.stringify(history));\n\n          contentInput.value = \"\";\n          loadHistory();\n        });\n\n        // Экспорт дневника\n        const exportButton = document.getElementById(\"exportDiary\");\n        if (exportButton) {\n          exportButton.addEventListener(\"click\", () => {\n            const history = localStorage.getItem(\"diaryHistory\") || \"[]\";\n            const progress = localStorage.getItem(\"learningProgress\") || \"{}\";\n\n            const data = {\n              diary: JSON.parse(history),\n              progress: JSON.parse(progress),\n            };\n\n            const blob = new Blob([JSON.stringify(data, null, 2)], {\n              type: \"application/json\",\n            });\n            const url = URL.createObjectURL(blob);\n\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = \"learning_data.json\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n          });\n        }\n\n        loadHistory();\n      });\n\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const filesList = document.querySelector(\".files-tree\");\n        const fileContent = document.getElementById(\"file-code\");\n        const currentFileName = document.getElementById(\"current-file\");\n\n        // Объект с содержимым файлов для GitHub Pages\n        const filesContent = {\n          \"test.js\": `// function delay(ms) {\n            return new Promise(function (resolve) {\n              console.log(1); //обработка промиса\n              setTimeout(resolve, ms);\n            });\n          }\n\n          function delay2(ms, func) {\n            return new Promise(function (resolve) {\n              setTimeout(\n                function () {\n                  console.log(2);\n                  resolve(func()); //вызов функции выполнение которой задерживается\n                },\n                ms\n              );\n            });\n          }\n\n          // ... остальное содержимое test.js`,\n\n          \"styles.css\": `:root {\n            --primary-color: #2c3e50;\n            --secondary-color: #3498db;\n            --background-color: #f5f6fa;\n            --card-background: #ffffff;\n            --text-color: #2c3e50;\n            --code-background: #f8f9fa;\n          }\n\n          // ... остальное содержимое styles.css`,\n\n          \"task1.js\": `// Содержимое task1.js`,\n          \"difference.js\": `// Содержимое difference.js`,\n          \"isEqual.js\": `// Содержимое isEqual.js`,\n          \"isEqual1.js\": `// Содержимое isEqual1.js`,\n          \"proto.js\": `// Содержимое proto.js`,\n          \"sortedUniq.js\": `// Содержимое sortedUniq.js`,\n          \"sortedUniq1.js\": `// Содержимое sortedUniq1.js`,\n          \"task3.js\": `// Содержимое task3.js`,\n          \"task4.js\": `// Содержимое task4.js`,\n          \"index.html\": `<!DOCTYPE html>\n<html lang=\"ru\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Основы JavaScript</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css\"\n    />\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n    <script>\n      hljs.highlightAll();\n    </script>\n    <script src=\"completed-topics.js\"></script>\n    <script src=\"task1.js\"></script>\n    <script>\n      // Функция для генерации оглавления\n      function generateTableOfContents() {\n        const toc = document.getElementById(\"toc\");\n        const headings = document.querySelectorAll(\"h2, h3, h4\");\n        const ul = document.createElement(\"ul\");\n\n        headings.forEach((heading, index) => {\n          // Пропускаем заголовки из прогресса обучения\n          if (heading.closest(\".progress-card\")) {\n            return;\n          }\n\n          // Пропускаем заголовок самого оглавления\n          if (heading.parentElement.classList.contains(\"table-of-contents\")) {\n            return;\n          }\n\n          // Создаем уникальный id для заголовка, если его нет\n          if (!heading.id) {\n            heading.id = `heading-${index}`;\n          }\n\n          const li = document.createElement(\"li\");\n          const a = document.createElement(\"a\");\n\n          a.href = `#${heading.id}`;\n          a.textContent = heading.textContent;\n          a.classList.add(`toc-${heading.tagName.toLowerCase()}`);\n\n          // Добавляем обработчик клика для плавного скролла\n          a.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            const targetHeading = document.getElementById(heading.id);\n            const targetSection =\n              targetHeading.closest(\".card\") ||\n              targetHeading.closest(\"section\");\n\n            // Добавляем отступ при скролле\n            window.scrollTo({\n              top: targetHeading.offsetTop - 100, // 100px отступ сверху\n              behavior: \"smooth\",\n            });\n\n            // Добавляем подсветку всего блока\n            if (targetSection) {\n              targetSection.classList.add(\"highlight-section\");\n              setTimeout(() => {\n                targetSection.classList.remove(\"highlight-section\");\n              }, 2000);\n            }\n          });\n\n          li.appendChild(a);\n          ul.appendChild(li);\n        });\n\n        toc.appendChild(ul);\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        generateTableOfContents();\n      });\n\n      // Функция для загрузки прогресса\n      async function loadProgress() {\n        try {\n          // Сначала пробуем загрузить из progress.json\n          const response = await fetch(\"progress.json\");\n          if (response.ok) {\n            const data = await response.json();\n            return data;\n          }\n        } catch (error) {\n          console.log(\n            \"Не удалось загрузить progress.json, используем localStorage\"\n          );\n        }\n\n        // Если не удалось загрузить из JSON, берем из localStorage\n        const savedProgress = localStorage.getItem(\"learningProgress\");\n        if (savedProgress) {\n          return JSON.parse(savedProgress);\n        }\n\n        // Если нигде нет данных, возвращаем пустой объект\n        return {};\n      }\n\n      // Функция для сохранения прогресса\n      function saveProgress(progress) {\n        localStorage.setItem(\"learningProgress\", JSON.stringify(progress));\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", async () => {\n        const progress = await loadProgress();\n\n        // Отмечаем изученные темы\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        checkboxes.forEach((checkbox) => {\n          const topic = checkbox.dataset.topic;\n          if (progress[topic]) {\n            checkbox.checked = true;\n          }\n\n          checkbox.addEventListener(\"change\", () => {\n            progress[topic] = checkbox.checked;\n            saveProgress(progress);\n            updateProgress();\n          });\n        });\n\n        updateProgress();\n      });\n\n      // Обновление процента прогресса\n      function updateProgress() {\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        const total = checkboxes.length;\n        const checked = Array.from(checkboxes).filter(\n          (cb) => cb.checked\n        ).length;\n        const percentage = Math.round((checked / total) * 100);\n\n        const progressInfo = document.querySelector(\".progress-info\");\n        if (progressInfo) {\n          progressInfo.innerHTML = `\n            <div class=\"progress-percentage\">${percentage}%</div>\n            <div>изучено</div>\n          `;\n        }\n      }\n\n      // Инициализация подсветки кода\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        document.querySelectorAll(\"pre code\").forEach((block) => {\n          hljs.highlightBlock(block);\n        });\n      });\n\n      // Работа с дневником\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const saveButton = document.getElementById(\"saveEntry\");\n        const dateInput = document.getElementById(\"entryDate\");\n        const contentInput = document.getElementById(\"entryContent\");\n        const historyContainer = document.getElementById(\"diaryHistory\");\n\n        // Установка текущей даты\n        const today = new Date().toISOString().split(\"T\")[0];\n        dateInput.value = today;\n\n        // Загрузка истории из localStorage\n        function loadHistory() {\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          historyContainer.innerHTML = \"\";\n\n          history\n            .sort((a, b) => new Date(b.date) - new Date(a.date))\n            .forEach((entry) => {\n              const entryElement = document.createElement(\"div\");\n              entryElement.className = \"history-entry\";\n              entryElement.innerHTML = `\n                    <div class=\"history-date\">${new Date(\n                      entry.date\n                    ).toLocaleDateString()}</div>\n                    <div class=\"history-content\">${entry.content}</div>\n                  `;\n              historyContainer.appendChild(entryElement);\n            });\n        }\n\n        // Сохранение записи\n        saveButton.addEventListener(\"click\", () => {\n          const date = dateInput.value;\n          const content = contentInput.value;\n\n          if (!content.trim()) {\n            alert(\"Пожалуйста, введите текст записи\");\n            return;\n          }\n\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          history.push({ date, content });\n          localStorage.setItem(\"diaryHistory\", JSON.stringify(history));\n\n          contentInput.value = \"\";\n          loadHistory();\n        });\n\n        // Экспорт дневника\n        const exportButton = document.getElementById(\"exportDiary\");\n        if (exportButton) {\n          exportButton.addEventListener(\"click\", () => {\n            const history = localStorage.getItem(\"diaryHistory\") || \"[]\";\n            const progress = localStorage.getItem(\"learningProgress\") || \"{}\";\n\n            const data = {\n              diary: JSON.parse(history),\n              progress: JSON.parse(progress),\n            };\n\n            const blob = new Blob([JSON.stringify(data, null, 2)], {\n              type: \"application/json\",\n            });\n            const url = URL.createObjectURL(blob);\n\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = \"learning_data.json\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n          });\n        }\n\n        loadHistory();\n      });\n\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const filesList = document.querySelector(\".files-tree\");\n        const fileContent = document.getElementById(\"file-code\");\n        const currentFileName = document.getElementById(\"current-file\");\n\n        // Объект с содержимым файлов для GitHub Pages\n        const filesContent = {\n          \"test.js\": `// function delay(ms) {\n            return new Promise(function (resolve) {\n              console.log(1); //обработка промиса\n              setTimeout(resolve, ms);\n            });\n          }\n\n          function delay2(ms, func) {\n            return new Promise(function (resolve) {\n              setTimeout(\n                function () {\n                  console.log(2);\n                  resolve(func()); //вызов функции выполнение которой задерживается\n                },\n                ms\n              );\n            });\n          }\n\n          // ... остальное содержимое test.js`,\n\n          \"styles.css\": `:root {\n            --primary-color: #2c3e50;\n            --secondary-color: #3498db;\n            --background-color: #f5f6fa;\n            --card-background: #ffffff;\n            --text-color: #2c3e50;\n            --code-background: #f8f9fa;\n          }\n\n          // ... остальное содержимое styles.css`,\n\n          \"task1.js\": `// Содержимое task1.js`,\n          \"difference.js\": `// Содержимое difference.js`,\n          \"isEqual.js\": `// Содержимое isEqual.js`,\n          \"isEqual1.js\": `// Содержимое isEqual1.js`,\n          \"proto.js\": `// Содержимое proto.js`,\n          \"sortedUniq.js\": `// Содержимое sortedUniq.js`,\n          \"sortedUniq1.js\": `// Содержимое sortedUniq1.js`,\n          \"task3.js\": `// Содержимое task3.js`,\n          \"task4.js\": `// Содержимое task4.js`,\n          \"index.html\": `<!DOCTYPE html>\n<html lang=\"ru\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Основы JavaScript</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css\"\n    />\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n    <script>\n      hljs.highlightAll();\n    </script>\n    <script src=\"completed-topics.js\"></script>\n    <script src=\"task1.js\"></script>\n    <script>\n      // Функция для генерации оглавления\n      function generateTableOfContents() {\n        const toc = document.getElementById(\"toc\");\n        const headings = document.querySelectorAll(\"h2, h3, h4\");\n        const ul = document.createElement(\"ul\");\n\n        headings.forEach((heading, index) => {\n          // Пропускаем заголовки из прогресса обучения\n          if (heading.closest(\".progress-card\")) {\n            return;\n          }\n\n          // Пропускаем заголовок самого оглавления\n          if (heading.parentElement.classList.contains(\"table-of-contents\")) {\n            return;\n          }\n\n          // Создаем уникальный id для заголовка, если его нет\n          if (!heading.id) {\n            heading.id = `heading-${index}`;\n          }\n\n          const li = document.createElement(\"li\");\n          const a = document.createElement(\"a\");\n\n          a.href = `#${heading.id}`;\n          a.textContent = heading.textContent;\n          a.classList.add(`toc-${heading.tagName.toLowerCase()}`);\n\n          // Добавляем обработчик клика для плавного скролла\n          a.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            const targetHeading = document.getElementById(heading.id);\n            const targetSection =\n              targetHeading.closest(\".card\") ||\n              targetHeading.closest(\"section\");\n\n            // Добавляем отступ при скролле\n            window.scrollTo({\n              top: targetHeading.offsetTop - 100, // 100px отступ сверху\n              behavior: \"smooth\",\n            });\n\n            // Добавляем подсветку всего блока\n            if (targetSection) {\n              targetSection.classList.add(\"highlight-section\");\n              setTimeout(() => {\n                targetSection.classList.remove(\"highlight-section\");\n              }, 2000);\n            }\n          });\n\n          li.appendChild(a);\n          ul.appendChild(li);\n        });\n\n        toc.appendChild(ul);\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        generateTableOfContents();\n      });\n\n      // Функция для загрузки прогресса\n      async function loadProgress() {\n        try {\n          // Сначала пробуем загрузить из progress.json\n          const response = await fetch(\"progress.json\");\n          if (response.ok) {\n            const data = await response.json();\n            return data;\n          }\n        } catch (error) {\n          console.log(\n            \"Не удалось загрузить progress.json, используем localStorage\"\n          );\n        }\n\n        // Если не удалось загрузить из JSON, берем из localStorage\n        const savedProgress = localStorage.getItem(\"learningProgress\");\n        if (savedProgress) {\n          return JSON.parse(savedProgress);\n        }\n\n        // Если нигде нет данных, возвращаем пустой объект\n        return {};\n      }\n\n      // Функция для сохранения прогресса\n      function saveProgress(progress) {\n        localStorage.setItem(\"learningProgress\", JSON.stringify(progress));\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", async () => {\n        const progress = await loadProgress();\n\n        // Отмечаем изученные темы\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        checkboxes.forEach((checkbox) => {\n          const topic = checkbox.dataset.topic;\n          if (progress[topic]) {\n            checkbox.checked = true;\n          }\n\n          checkbox.addEventListener(\"change\", () => {\n            progress[topic] = checkbox.checked;\n            saveProgress(progress);\n            updateProgress();\n          });\n        });\n\n        updateProgress();\n      });\n\n      // Обновление процента прогресса\n      function updateProgress() {\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        const total = checkboxes.length;\n        const checked = Array.from(checkboxes).filter(\n          (cb) => cb.checked\n        ).length;\n        const percentage = Math.round((checked / total) * 100);\n\n        const progressInfo = document.querySelector(\".progress-info\");\n        if (progressInfo) {\n          progressInfo.innerHTML = `\n            <div class=\"progress-percentage\">${percentage}%</div>\n            <div>изучено</div>\n          `;\n        }\n      }\n\n      // Инициализация подсветки кода\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        document.querySelectorAll(\"pre code\").forEach((block) => {\n          hljs.highlightBlock(block);\n        });\n      });\n\n      // Работа с дневником\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const saveButton = document.getElementById(\"saveEntry\");\n        const dateInput = document.getElementById(\"entryDate\");\n        const contentInput = document.getElementById(\"entryContent\");\n        const historyContainer = document.getElementById(\"diaryHistory\");\n\n        // Установка текущей даты\n        const today = new Date().toISOString().split(\"T\")[0];\n        dateInput.value = today;\n\n        // Загрузка истории из localStorage\n        function loadHistory() {\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          historyContainer.innerHTML = \"\";\n\n          history\n            .sort((a, b) => new Date(b.date) - new Date(a.date))\n            .forEach((entry) => {\n              const entryElement = document.createElement(\"div\");\n              entryElement.className = \"history-entry\";\n              entryElement.innerHTML = `\n                    <div class=\"history-date\">${new Date(\n                      entry.date\n                    ).toLocaleDateString()}</div>\n                    <div class=\"history-content\">${entry.content}</div>\n                  `;\n              historyContainer.appendChild(entryElement);\n            });\n        }\n\n        // Сохранение записи\n        saveButton.addEventListener(\"click\", () => {\n          const date = dateInput.value;\n          const content = contentInput.value;\n\n          if (!content.trim()) {\n            alert(\"Пожалуйста, введите текст записи\");\n            return;\n          }\n\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          history.push({ date, content });\n          localStorage.setItem(\"diaryHistory\", JSON.stringify(history));\n\n          contentInput.value = \"\";\n          loadHistory();\n        });\n\n        // Экспорт дневника\n        const exportButton = document.getElementById(\"exportDiary\");\n        if (exportButton) {\n          exportButton.addEventListener(\"click\", () => {\n            const history = localStorage.getItem(\"diaryHistory\") || \"[]\";\n            const progress = localStorage.getItem(\"learningProgress\") || \"{}\";\n\n            const data = {\n              diary: JSON.parse(history),\n              progress: JSON.parse(progress),\n            };\n\n            const blob = new Blob([JSON.stringify(data, null, 2)], {\n              type: \"application/json\",\n            });\n            const url = URL.createObjectURL(blob);\n\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = \"learning_data.json\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n          });\n        }\n\n        loadHistory();\n      });\n\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const filesList = document.querySelector(\".files-tree\");\n        const fileContent = document.getElementById(\"file-code\");\n        const currentFileName = document.getElementById(\"current-file\");\n\n        // Объект с содержимым файлов для GitHub Pages\n        const filesContent = {\n          \"test.js\": `// function delay(ms) {\n            return new Promise(function (resolve) {\n              console.log(1); //обработка промиса\n              setTimeout(resolve, ms);\n            });\n          }\n\n          function delay2(ms, func) {\n            return new Promise(function (resolve) {\n              setTimeout(\n                function () {\n                  console.log(2);\n                  resolve(func()); //вызов функции выполнение которой задерживается\n                },\n                ms\n              );\n            });\n          }\n\n          // ... остальное содержимое test.js`,\n\n          \"styles.css\": `:root {\n            --primary-color: #2c3e50;\n            --secondary-color: #3498db;\n            --background-color: #f5f6fa;\n            --card-background: #ffffff;\n            --text-color: #2c3e50;\n            --code-background: #f8f9fa;\n          }\n\n          // ... остальное содержимое styles.css`,\n\n          \"task1.js\": `// Содержимое task1.js`,\n          \"difference.js\": `// Содержимое difference.js`,\n          \"isEqual.js\": `// Содержимое isEqual.js`,\n          \"isEqual1.js\": `// Содержимое isEqual1.js`,\n          \"proto.js\": `// Содержимое proto.js`,\n          \"sortedUniq.js\": `// Содержимое sortedUniq.js`,\n          \"sortedUniq1.js\": `// Содержимое sortedUniq1.js`,\n          \"task3.js\": `// Содержимое task3.js`,\n          \"task4.js\": `// Содержимое task4.js`,\n          \"index.html\": `<!DOCTYPE html>\n<html lang=\"ru\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Основы JavaScript</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css\"\n    />\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n    <script>\n      hljs.highlightAll();\n    </script>\n    <script src=\"completed-topics.js\"></script>\n    <script src=\"task1.js\"></script>\n    <script>\n      // Функция для генерации оглавления\n      function generateTableOfContents() {\n        const toc = document.getElementById(\"toc\");\n        const headings = document.querySelectorAll(\"h2, h3, h4\");\n        const ul = document.createElement(\"ul\");\n\n        headings.forEach((heading, index) => {\n          // Пропускаем заголовки из прогресса обучения\n          if (heading.closest(\".progress-card\")) {\n            return;\n          }\n\n          // Пропускаем заголовок самого оглавления\n          if (heading.parentElement.classList.contains(\"table-of-contents\")) {\n            return;\n          }\n\n          // Создаем уникальный id для заголовка, если его нет\n          if (!heading.id) {\n            heading.id = `heading-${index}`;\n          }\n\n          const li = document.createElement(\"li\");\n          const a = document.createElement(\"a\");\n\n          a.href = `#${heading.id}`;\n          a.textContent = heading.textContent;\n          a.classList.add(`toc-${heading.tagName.toLowerCase()}`);\n\n          // Добавляем обработчик клика для плавного скролла\n          a.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            const targetHeading = document.getElementById(heading.id);\n            const targetSection =\n              targetHeading.closest(\".card\") ||\n              targetHeading.closest(\"section\");\n\n            // Добавляем отступ при скролле\n            window.scrollTo({\n              top: targetHeading.offsetTop - 100, // 100px отступ сверху\n              behavior: \"smooth\",\n            });\n\n            // Добавляем подсветку всего блока\n            if (targetSection) {\n              targetSection.classList.add(\"highlight-section\");\n              setTimeout(() => {\n                targetSection.classList.remove(\"highlight-section\");\n              }, 2000);\n            }\n          });\n\n          li.appendChild(a);\n          ul.appendChild(li);\n        });\n\n        toc.appendChild(ul);\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        generateTableOfContents();\n      });\n\n      // Функция для загрузки прогресса\n      async function loadProgress() {\n        try {\n          // Сначала пробуем загрузить из progress.json\n          const response = await fetch(\"progress.json\");\n          if (response.ok) {\n            const data = await response.json();\n            return data;\n          }\n        } catch (error) {\n          console.log(\n            \"Не удалось загрузить progress.json, используем localStorage\"\n          );\n        }\n\n        // Если не удалось загрузить из JSON, берем из localStorage\n        const savedProgress = localStorage.getItem(\"learningProgress\");\n        if (savedProgress) {\n          return JSON.parse(savedProgress);\n        }\n\n        // Если нигде нет данных, возвращаем пустой объект\n        return {};\n      }\n\n      // Функция для сохранения прогресса\n      function saveProgress(progress) {\n        localStorage.setItem(\"learningProgress\", JSON.stringify(progress));\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", async () => {\n        const progress = await loadProgress();\n\n        // Отмечаем изученные темы\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        checkboxes.forEach((checkbox) => {\n          const topic = checkbox.dataset.topic;\n          if (progress[topic]) {\n            checkbox.checked = true;\n          }\n\n          checkbox.addEventListener(\"change\", () => {\n            progress[topic] = checkbox.checked;\n            saveProgress(progress);\n            updateProgress();\n          });\n        });\n\n        updateProgress();\n      });\n\n      // Обновление процента прогресса\n      function updateProgress() {\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        const total = checkboxes.length;\n        const checked = Array.from(checkboxes).filter(\n          (cb) => cb.checked\n        ).length;\n        const percentage = Math.round((checked / total) * 100);\n\n        const progressInfo = document.querySelector(\".progress-info\");\n        if (progressInfo) {\n          progressInfo.innerHTML = `\n            <div class=\"progress-percentage\">${percentage}%</div>\n            <div>изучено</div>\n          `;\n        }\n      }\n\n      // Инициализация подсветки кода\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        document.querySelectorAll(\"pre code\").forEach((block) => {\n          hljs.highlightBlock(block);\n        });\n      });\n\n      // Работа с дневником\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const saveButton = document.getElementById(\"saveEntry\");\n        const dateInput = document.getElementById(\"entryDate\");\n        const contentInput = document.getElementById(\"entryContent\");\n        const historyContainer = document.getElementById(\"diaryHistory\");\n\n        // Установка текущей даты\n        const today = new Date().toISOString().split(\"T\")[0];\n        dateInput.value = today;\n\n        // Загрузка истории из localStorage\n        function loadHistory() {\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          historyContainer.innerHTML = \"\";\n\n          history\n            .sort((a, b) => new Date(b.date) - new Date(a.date))\n            .forEach((entry) => {\n              const entryElement = document.createElement(\"div\");\n              entryElement.className = \"history-entry\";\n              entryElement.innerHTML = `\n                    <div class=\"history-date\">${new Date(\n                      entry.date\n                    ).toLocaleDateString()}</div>\n                    <div class=\"history-content\">${entry.content}</div>\n                  `;\n              historyContainer.appendChild(entryElement);\n            });\n        }\n\n        // Сохранение записи\n        saveButton.addEventListener(\"click\", () => {\n          const date = dateInput.value;\n          const content = contentInput.value;\n\n          if (!content.trim()) {\n            alert(\"Пожалуйста, введите текст записи\");\n            return;\n          }\n\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          history.push({ date, content });\n          localStorage.setItem(\"diaryHistory\", JSON.stringify(history));\n\n          contentInput.value = \"\";\n          loadHistory();\n        });\n\n        // Экспорт дневника\n        const exportButton = document.getElementById(\"exportDiary\");\n        if (exportButton) {\n          exportButton.addEventListener(\"click\", () => {\n            const history = localStorage.getItem(\"diaryHistory\") || \"[]\";\n            const progress = localStorage.getItem(\"learningProgress\") || \"{}\";\n\n            const data = {\n              diary: JSON.parse(history),\n              progress: JSON.parse(progress),\n            };\n\n            const blob = new Blob([JSON.stringify(data, null, 2)], {\n              type: \"application/json\",\n            });\n            const url = URL.createObjectURL(blob);\n\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = \"learning_data.json\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n          });\n        }\n\n        loadHistory();\n      });\n\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const filesList = document.querySelector(\".files-tree\");\n        const fileContent = document.getElementById(\"file-code\");\n        const currentFileName = document.getElementById(\"current-file\");\n\n        // Объект с содержимым файлов для GitHub Pages\n        const filesContent = {\n          \"test.js\": `// function delay(ms) {\n            return new Promise(function (resolve) {\n              console.log(1); //обработка промиса\n              setTimeout(resolve, ms);\n            });\n          }\n\n          function delay2(ms, func) {\n            return new Promise(function (resolve) {\n              setTimeout(\n                function () {\n                  console.log(2);\n                  resolve(func()); //вызов функции выполнение которой задерживается\n                },\n                ms\n              );\n            });\n          }\n\n          // ... остальное содержимое test.js`,\n\n          \"styles.css\": `:root {\n            --primary-color: #2c3e50;\n            --secondary-color: #3498db;\n            --background-color: #f5f6fa;\n            --card-background: #ffffff;\n            --text-color: #2c3e50;\n            --code-background: #f8f9fa;\n          }\n\n          // ... остальное содержимое styles.css`,\n\n          \"task1.js\": `// Содержимое task1.js`,\n          \"difference.js\": `// Содержимое difference.js`,\n          \"isEqual.js\": `// Содержимое isEqual.js`,\n          \"isEqual1.js\": `// Содержимое isEqual1.js`,\n          \"proto.js\": `// Содержимое proto.js`,\n          \"sortedUniq.js\": `// Содержимое sortedUniq.js`,\n          \"sortedUniq1.js\": `// Содержимое sortedUniq1.js`,\n          \"task3.js\": `// Содержимое task3.js`,\n          \"task4.js\": `// Содержимое task4.js`,\n          \"index.html\": `<!DOCTYPE html>\n<html lang=\"ru\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Основы JavaScript</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css\"\n    />\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n    <script>\n      hljs.highlightAll();\n    </script>\n    <script src=\"completed-topics.js\"></script>\n    <script src=\"task1.js\"></script>\n    <script>\n      // Функция для генерации оглавления\n      function generateTableOfContents() {\n        const toc = document.getElementById(\"toc\");\n        const headings = document.querySelectorAll(\"h2, h3, h4\");\n        const ul = document.createElement(\"ul\");\n\n        headings.forEach((heading, index) => {\n          // Пропускаем заголовки из прогресса обучения\n          if (heading.closest(\".progress-card\")) {\n            return;\n          }\n\n          // Пропускаем заголовок самого оглавления\n          if (heading.parentElement.classList.contains(\"table-of-contents\")) {\n            return;\n          }\n\n          // Создаем уникальный id для заголовка, если его нет\n          if (!heading.id) {\n            heading.id = `heading-${index}`;\n          }\n\n          const li = document.createElement(\"li\");\n          const a = document.createElement(\"a\");\n\n          a.href = `#${heading.id}`;\n          a.textContent = heading.textContent;\n          a.classList.add(`toc-${heading.tagName.toLowerCase()}`);\n\n          // Добавляем обработчик клика для плавного скролла\n          a.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            const targetHeading = document.getElementById(heading.id);\n            const targetSection =\n              targetHeading.closest(\".card\") ||\n              targetHeading.closest(\"section\");\n\n            // Добавляем отступ при скролле\n            window.scrollTo({\n              top: targetHeading.offsetTop - 100, // 100px отступ сверху\n              behavior: \"smooth\",\n            });\n\n            // Добавляем подсветку всего блока\n            if (targetSection) {\n              targetSection.classList.add(\"highlight-section\");\n              setTimeout(() => {\n                targetSection.classList.remove(\"highlight-section\");\n              }, 2000);\n            }\n          });\n\n          li.appendChild(a);\n          ul.appendChild(li);\n        });\n\n        toc.appendChild(ul);\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        generateTableOfContents();\n      });\n\n      // Функция для загрузки прогресса\n      async function loadProgress() {\n        try {\n          // Сначала пробуем загрузить из progress.json\n          const response = await fetch(\"progress.json\");\n          if (response.ok) {\n            const data = await response.json();\n            return data;\n          }\n        } catch (error) {\n          console.log(\n            \"Не удалось загрузить progress.json, используем localStorage\"\n          );\n        }\n\n        // Если не удалось загрузить из JSON, берем из localStorage\n        const savedProgress = localStorage.getItem(\"learningProgress\");\n        if (savedProgress) {\n          return JSON.parse(savedProgress);\n        }\n\n        // Если нигде нет данных, возвращаем пустой объект\n        return {};\n      }\n\n      // Функция для сохранения прогресса\n      function saveProgress(progress) {\n        localStorage.setItem(\"learningProgress\", JSON.stringify(progress));\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", async () => {\n        const progress = await loadProgress();\n\n        // Отмечаем изученные темы\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        checkboxes.forEach((checkbox) => {\n          const topic = checkbox.dataset.topic;\n          if (progress[topic]) {\n            checkbox.checked = true;\n          }\n\n          checkbox.addEventListener(\"change\", () => {\n            progress[topic] = checkbox.checked;\n            saveProgress(progress);\n            updateProgress();\n          });\n        });\n\n        updateProgress();\n      });\n\n      // Обновление процента прогресса\n      function updateProgress() {\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        const total = checkboxes.length;\n        const checked = Array.from(checkboxes).filter(\n          (cb) => cb.checked\n        ).length;\n        const percentage = Math.round((checked / total) * 100);\n\n        const progressInfo = document.querySelector(\".progress-info\");\n        if (progressInfo) {\n          progressInfo.innerHTML = `\n            <div class=\"progress-percentage\">${percentage}%</div>\n            <div>изучено</div>\n          `;\n        }\n      }\n\n      // Инициализация подсветки кода\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        document.querySelectorAll(\"pre code\").forEach((block) => {\n          hljs.highlightBlock(block);\n        });\n      });\n\n      // Работа с дневником\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const saveButton = document.getElementById(\"saveEntry\");\n        const dateInput = document.getElementById(\"entryDate\");\n        const contentInput = document.getElementById(\"entryContent\");\n        const historyContainer = document.getElementById(\"diaryHistory\");\n\n        // Установка текущей даты\n        const today = new Date().toISOString().split(\"T\")[0];\n        dateInput.value = today;\n\n        // Загрузка истории из localStorage\n        function loadHistory() {\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          historyContainer.innerHTML = \"\";\n\n          history\n            .sort((a, b) => new Date(b.date) - new Date(a.date))\n            .forEach((entry) => {\n              const entryElement = document.createElement(\"div\");\n              entryElement.className = \"history-entry\";\n              entryElement.innerHTML = `\n                    <div class=\"history-date\">${new Date(\n                      entry.date\n                    ).toLocaleDateString()}</div>\n                    <div class=\"history-content\">${entry.content}</div>\n                  `;\n              historyContainer.appendChild(entryElement);\n            });\n        }\n\n        // Сохранение записи\n        saveButton.addEventListener(\"click\", () => {\n          const date = dateInput.value;\n          const content = contentInput.value;\n\n          if (!content.trim()) {\n            alert(\"Пожалуйста, введите текст записи\");\n            return;\n          }\n\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          history.push({ date, content });\n          localStorage.setItem(\"diaryHistory\", JSON.stringify(history));\n\n          contentInput.value = \"\";\n          loadHistory();\n        });\n\n        // Экспорт дневника\n        const exportButton = document.getElementById(\"exportDiary\");\n        if (exportButton) {\n          exportButton.addEventListener(\"click\", () => {\n            const history = localStorage.getItem(\"diaryHistory\") || \"[]\";\n            const progress = localStorage.getItem(\"learningProgress\") || \"{}\";\n\n            const data = {\n              diary: JSON.parse(history),\n              progress: JSON.parse(progress),\n            };\n\n            const blob = new Blob([JSON.stringify(data, null, 2)], {\n              type: \"application/json\",\n            });\n            const url = URL.createObjectURL(blob);\n\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = \"learning_data.json\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n          });\n        }\n\n        loadHistory();\n      });\n\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const filesList = document.querySelector(\".files-tree\");\n        const fileContent = document.getElementById(\"file-code\");\n        const currentFileName = document.getElementById(\"current-file\");\n\n        // Объект с содержимым файлов для GitHub Pages\n        const filesContent = {\n          \"test.js\": `// function delay(ms) {\n            return new Promise(function (resolve) {\n              console.log(1); //обработка промиса\n              setTimeout(resolve, ms);\n            });\n          }\n\n          function delay2(ms, func) {\n            return new Promise(function (resolve) {\n              setTimeout(\n                function () {\n                  console.log(2);\n                  resolve(func()); //вызов функции выполнение которой задерживается\n                },\n                ms\n              );\n            });\n          }\n\n          // ... остальное содержимое test.js`,\n\n          \"styles.css\": `:root {\n            --primary-color: #2c3e50;\n            --secondary-color: #3498db;\n            --background-color: #f5f6fa;\n            --card-background: #ffffff;\n            --text-color: #2c3e50;\n            --code-background: #f8f9fa;\n          }\n\n          // ... остальное содержимое styles.css`,\n\n          \"task1.js\": `// Содержимое task1.js`,\n          \"difference.js\": `// Содержимое difference.js`,\n          \"isEqual.js\": `// Содержимое isEqual.js`,\n          \"isEqual1.js\": `// Содержимое isEqual1.js`,\n          \"proto.js\": `// Содержимое proto.js`,\n          \"sortedUniq.js\": `// Содержимое sortedUniq.js`,\n          \"sortedUniq1.js\": `// Содержимое sortedUniq1.js`,\n          \"task3.js\": `// Содержимое task3.js`,\n          \"task4.js\": `// Содержимое task4.js`,\n          \"index.html\": `<!DOCTYPE html>\n<html lang=\"ru\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Основы JavaScript</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css\"\n    />\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n    <script>\n      hljs.highlightAll();\n    </script>\n    <script src=\"completed-topics.js\"></script>\n    <script src=\"task1.js\"></script>\n    <script>\n      // Функция для генерации оглавления\n      function generateTableOfContents() {\n        const toc = document.getElementById(\"toc\");\n        const headings = document.querySelectorAll(\"h2, h3, h4\");\n        const ul = document.createElement(\"ul\");\n\n        headings.forEach((heading, index) => {\n          // Пропускаем заголовки из прогресса обучения\n          if (heading.closest(\".progress-card\")) {\n            return;\n          }\n\n          // Пропускаем заголовок самого оглавления\n          if (heading.parentElement.classList.contains(\"table-of-contents\")) {\n            return;\n          }\n\n          // Создаем уникальный id для заголовка, если его нет\n          if (!heading.id) {\n            heading.id = `heading-${index}`;\n          }\n\n          const li = document.createElement(\"li\");\n          const a = document.createElement(\"a\");\n\n          a.href = `#${heading.id}`;\n          a.textContent = heading.textContent;\n          a.classList.add(`toc-${heading.tagName.toLowerCase()}`);\n\n          // Добавляем обработчик клика для плавного скролла\n          a.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            const targetHeading = document.getElementById(heading.id);\n            const targetSection =\n              targetHeading.closest(\".card\") ||\n              targetHeading.closest(\"section\");\n\n            // Добавляем отступ при скролле\n            window.scrollTo({\n              top: targetHeading.offsetTop - 100, // 100px отступ сверху\n              behavior: \"smooth\",\n            });\n\n            // Добавляем подсветку всего блока\n            if (targetSection) {\n              targetSection.classList.add(\"highlight-section\");\n              setTimeout(() => {\n                targetSection.classList.remove(\"highlight-section\");\n              }, 2000);\n            }\n          });\n\n          li.appendChild(a);\n          ul.appendChild(li);\n        });\n\n        toc.appendChild(ul);\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        generateTableOfContents();\n      });\n\n      // Функция для загрузки прогресса\n      async function loadProgress() {\n        try {\n          // Сначала пробуем загрузить из progress.json\n          const response = await fetch(\"progress.json\");\n          if (response.ok) {\n            const data = await response.json();\n            return data;\n          }\n        } catch (error) {\n          console.log(\n            \"Не удалось загрузить progress.json, используем localStorage\"\n          );\n        }\n\n        // Если не удалось загрузить из JSON, берем из localStorage\n        const savedProgress = localStorage.getItem(\"learningProgress\");\n        if (savedProgress) {\n          return JSON.parse(savedProgress);\n        }\n\n        // Если нигде нет данных, возвращаем пустой объект\n        return {};\n      }\n\n      // Функция для сохранения прогресса\n      function saveProgress(progress) {\n        localStorage.setItem(\"learningProgress\", JSON.stringify(progress));\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", async () => {\n        const progress = await loadProgress();\n\n        // Отмечаем изученные темы\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        checkboxes.forEach((checkbox) => {\n          const topic = checkbox.dataset.topic;\n          if (progress[topic]) {\n            checkbox.checked = true;\n          }\n\n          checkbox.addEventListener(\"change\", () => {\n            progress[topic] = checkbox.checked;\n            saveProgress(progress);\n            updateProgress();\n          });\n        });\n\n        updateProgress();\n      });\n\n      // Обновление процента прогресса\n      function updateProgress() {\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        const total = checkboxes.length;\n        const checked = Array.from(checkboxes).filter(\n          (cb) => cb.checked\n        ).length;\n        const percentage = Math.round((checked / total) * 100);\n\n        const progressInfo = document.querySelector(\".progress-info\");\n        if (progressInfo) {\n          progressInfo.innerHTML = `\n            <div class=\"progress-percentage\">${percentage}%</div>\n            <div>изучено</div>\n          `;\n        }\n      }\n\n      // Инициализация подсветки кода\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        document.querySelectorAll(\"pre code\").forEach((block) => {\n          hljs.highlightBlock(block);\n        });\n      });\n\n      // Работа с дневником\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const saveButton = document.getElementById(\"saveEntry\");\n        const dateInput = document.getElementById(\"entryDate\");\n        const contentInput = document.getElementById(\"entryContent\");\n        const historyContainer = document.getElementById(\"diaryHistory\");\n\n        // Установка текущей даты\n        const today = new Date().toISOString().split(\"T\")[0];\n        dateInput.value = today;\n\n        // Загрузка истории из localStorage\n        function loadHistory() {\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          historyContainer.innerHTML = \"\";\n\n          history\n            .sort((a, b) => new Date(b.date) - new Date(a.date))\n            .forEach((entry) => {\n              const entryElement = document.createElement(\"div\");\n              entryElement.className = \"history-entry\";\n              entryElement.innerHTML = `\n                    <div class=\"history-date\">${new Date(\n                      entry.date\n                    ).toLocaleDateString()}</div>\n                    <div class=\"history-content\">${entry.content}</div>\n                  `;\n              historyContainer.appendChild(entryElement);\n            });\n        }\n\n        // Сохранение записи\n        saveButton.addEventListener(\"click\", () => {\n          const date = dateInput.value;\n          const content = contentInput.value;\n\n          if (!content.trim()) {\n            alert(\"Пожалуйста, введите текст записи\");\n            return;\n          }\n\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          history.push({ date, content });\n          localStorage.setItem(\"diaryHistory\", JSON.stringify(history));\n\n          contentInput.value = \"\";\n          loadHistory();\n        });\n\n        // Экспорт дневника\n        const exportButton = document.getElementById(\"exportDiary\");\n        if (exportButton) {\n          exportButton.addEventListener(\"click\", () => {\n            const history = localStorage.getItem(\"diaryHistory\") || \"[]\";\n            const progress = localStorage.getItem(\"learningProgress\") || \"{}\";\n\n            const data = {\n              diary: JSON.parse(history),\n              progress: JSON.parse(progress),\n            };\n\n            const blob = new Blob([JSON.stringify(data, null, 2)], {\n              type: \"application/json\",\n            });\n            const url = URL.createObjectURL(blob);\n\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = \"learning_data.json\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n          });\n        }\n\n        loadHistory();\n      });\n\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const filesList = document.querySelector(\".files-tree\");\n        const fileContent = document.getElementById(\"file-code\");\n        const currentFileName = document.getElementById(\"current-file\");\n\n        // Объект с содержимым файлов для GitHub Pages\n        const filesContent = {\n          \"test.js\": `// function delay(ms) {\n            return new Promise(function (resolve) {\n              console.log(1); //обработка промиса\n              setTimeout(resolve, ms);\n            });\n          }\n\n          function delay2(ms, func) {\n            return new Promise(function (resolve) {\n              setTimeout(\n                function () {\n                  console.log(2);\n                  resolve(func()); //вызов функции выполнение которой задерживается\n                },\n                ms\n              );\n            });\n          }\n\n          // ... остальное содержимое test.js`,\n\n          \"styles.css\": `:root {\n            --primary-color: #2c3e50;\n            --secondary-color: #3498db;\n            --background-color: #f5f6fa;\n            --card-background: #ffffff;\n            --text-color: #2c3e50;\n            --code-background: #f8f9fa;\n          }\n\n          // ... остальное содержимое styles.css`,\n\n          \"task1.js\": `// Содержимое task1.js`,\n          \"difference.js\": `// Содержимое difference.js`,\n          \"isEqual.js\": `// Содержимое isEqual.js`,\n          \"isEqual1.js\": `// Содержимое isEqual1.js`,\n          \"proto.js\": `// Содержимое proto.js`,\n          \"sortedUniq.js\": `// Содержимое sortedUniq.js`,\n          \"sortedUniq1.js\": `// Содержимое sortedUniq1.js`,\n          \"task3.js\": `// Содержимое task3.js`,\n          \"task4.js\": `// Содержимое task4.js`,\n          \"index.html\": `<!DOCTYPE html>\n<html lang=\"ru\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Основы JavaScript</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css\"\n    />\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n    <script>\n      hljs.highlightAll();\n    </script>\n    <script src=\"completed-topics.js\"></script>\n    <script src=\"task1.js\"></script>\n    <script>\n      // Функция для генерации оглавления\n      function generateTableOfContents() {\n        const toc = document.getElementById(\"toc\");\n        const headings = document.querySelectorAll(\"h2, h3, h4\");\n        const ul = document.createElement(\"ul\");\n\n        headings.forEach((heading, index) => {\n          // Пропускаем заголовки из прогресса обучения\n          if (heading.closest(\".progress-card\")) {\n            return;\n          }\n\n          // Пропускаем заголовок самого оглавления\n          if (heading.parentElement.classList.contains(\"table-of-contents\")) {\n            return;\n          }\n\n          // Создаем уникальный id для заголовка, если его нет\n          if (!heading.id) {\n            heading.id = `heading-${index}`;\n          }\n\n          const li = document.createElement(\"li\");\n          const a = document.createElement(\"a\");\n\n          a.href = `#${heading.id}`;\n          a.textContent = heading.textContent;\n          a.classList.add(`toc-${heading.tagName.toLowerCase()}`);\n\n          // Добавляем обработчик клика для плавного скролла\n          a.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            const targetHeading = document.getElementById(heading.id);\n            const targetSection =\n              targetHeading.closest(\".card\") ||\n              targetHeading.closest(\"section\");\n\n            // Добавляем отступ при скролле\n            window.scrollTo({\n              top: targetHeading.offsetTop - 100, // 100px отступ сверху\n              behavior: \"smooth\",\n            });\n\n            // Добавляем подсветку всего блока\n            if (targetSection) {\n              targetSection.classList.add(\"highlight-section\");\n              setTimeout(() => {\n                targetSection.classList.remove(\"highlight-section\");\n              }, 2000);\n            }\n          });\n\n          li.appendChild(a);\n          ul.appendChild(li);\n        });\n\n        toc.appendChild(ul);\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        generateTableOfContents();\n      });\n\n      // Функция для загрузки прогресса\n      async function loadProgress() {\n        try {\n          // Сначала пробуем загрузить из progress.json\n          const response = await fetch(\"progress.json\");\n          if (response.ok) {\n            const data = await response.json();\n            return data;\n          }\n        } catch (error) {\n          console.log(\n            \"Не удалось загрузить progress.json, используем localStorage\"\n          );\n        }\n\n        // Если не удалось загрузить из JSON, берем из localStorage\n        const savedProgress = localStorage.getItem(\"learningProgress\");\n        if (savedProgress) {\n          return JSON.parse(savedProgress);\n        }\n\n        // Если нигде нет данных, возвращаем пустой объект\n        return {};\n      }\n\n      // Функция для сохранения прогресса\n      function saveProgress(progress) {\n        localStorage.setItem(\"learningProgress\", JSON.stringify(progress));\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", async () => {\n        const progress = await loadProgress();\n\n        // Отмечаем изученные темы\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        checkboxes.forEach((checkbox) => {\n          const topic = checkbox.dataset.topic;\n          if (progress[topic]) {\n            checkbox.checked = true;\n          }\n\n          checkbox.addEventListener(\"change\", () => {\n            progress[topic] = checkbox.checked;\n            saveProgress(progress);\n            updateProgress();\n          });\n        });\n\n        updateProgress();\n      });\n\n      // Обновление процента прогресса\n      function updateProgress() {\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        const total = checkboxes.length;\n        const checked = Array.from(checkboxes).filter(\n          (cb) => cb.checked\n        ).length;\n        const percentage = Math.round((checked / total) * 100);\n\n        const progressInfo = document.querySelector(\".progress-info\");\n        if (progressInfo) {\n          progressInfo.innerHTML = `\n            <div class=\"progress-percentage\">${percentage}%</div>\n            <div>изучено</div>\n          `;\n        }\n      }\n\n      // Инициализация подсветки кода\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        document.querySelectorAll(\"pre code\").forEach((block) => {\n          hljs.highlightBlock(block);\n        });\n      });\n\n      // Работа с дневником\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const saveButton = document.getElementById(\"saveEntry\");\n        const dateInput = document.getElementById(\"entryDate\");\n        const contentInput = document.getElementById(\"entryContent\");\n        const historyContainer = document.getElementById(\"diaryHistory\");\n\n        // Установка текущей даты\n        const today = new Date().toISOString().split(\"T\")[0];\n        dateInput.value = today;\n\n        // Загрузка истории из localStorage\n        function loadHistory() {\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          historyContainer.innerHTML = \"\";\n\n          history\n            .sort((a, b) => new Date(b.date) - new Date(a.date))\n            .forEach((entry) => {\n              const entryElement = document.createElement(\"div\");\n              entryElement.className = \"history-entry\";\n              entryElement.innerHTML = `\n                    <div class=\"history-date\">${new Date(\n                      entry.date\n                    ).toLocaleDateString()}</div>\n                    <div class=\"history-content\">${entry.content}</div>\n                  `;\n              historyContainer.appendChild(entryElement);\n            });\n        }\n\n        // Сохранение записи\n        saveButton.addEventListener(\"click\", () => {\n          const date = dateInput.value;\n          const content = contentInput.value;\n\n          if (!content.trim()) {\n            alert(\"Пожалуйста, введите текст записи\");\n            return;\n          }\n\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          history.push({ date, content });\n          localStorage.setItem(\"diaryHistory\", JSON.stringify(history));\n\n          contentInput.value = \"\";\n          loadHistory();\n        });\n\n        // Экспорт дневника\n        const exportButton = document.getElementById(\"exportDiary\");\n        if (exportButton) {\n          exportButton.addEventListener(\"click\", () => {\n            const history = localStorage.getItem(\"diaryHistory\") || \"[]\";\n            const progress = localStorage.getItem(\"learningProgress\") || \"{}\";\n\n            const data = {\n              diary: JSON.parse(history),\n              progress: JSON.parse(progress),\n            };\n\n            const blob = new Blob([JSON.stringify(data, null, 2)], {\n              type: \"application/json\",\n            });\n            const url = URL.createObjectURL(blob);\n\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = \"learning_data.json\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n          });\n        }\n\n        loadHistory();\n      });\n\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const filesList = document.querySelector(\".files-tree\");\n        const fileContent = document.getElementById(\"file-code\");\n        const currentFileName = document.getElementById(\"current-file\");\n\n        // Объект с содержимым файлов для GitHub Pages\n        const filesContent = {\n          \"test.js\": `// function delay(ms) {\n            return new Promise(function (resolve) {\n              console.log(1); //обработка промиса\n              setTimeout(resolve, ms);\n            });\n          }\n\n          function delay2(ms, func) {\n            return new Promise(function (resolve) {\n              setTimeout(\n                function () {\n                  console.log(2);\n                  resolve(func()); //вызов функции выполнение которой задерживается\n                },\n                ms\n              );\n            });\n          }\n\n          // ... остальное содержимое test.js`,\n\n          \"styles.css\": `:root {\n            --primary-color: #2c3e50;\n            --secondary-color: #3498db;\n            --background-color: #f5f6fa;\n            --card-background: #ffffff;\n            --text-color: #2c3e50;\n            --code-background: #f8f9fa;\n          }\n\n          // ... остальное содержимое styles.css`,\n\n          \"task1.js\": `// Содержимое task1.js`,\n          \"difference.js\": `// Содержимое difference.js`,\n          \"isEqual.js\": `// Содержимое isEqual.js`,\n          \"isEqual1.js\": `// Содержимое isEqual1.js`,\n          \"proto.js\": `// Содержимое proto.js`,\n          \"sortedUniq.js\": `// Содержимое sortedUniq.js`,\n          \"sortedUniq1.js\": `// Содержимое sortedUniq1.js`,\n          \"task3.js\": `// Содержимое task3.js`,\n          \"task4.js\": `// Содержимое task4.js`,\n          \"index.html\": `<!DOCTYPE html>\n<html lang=\"ru\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Основы JavaScript</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css\"\n    />\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n    <script>\n      hljs.highlightAll();\n    </script>\n    <script src=\"completed-topics.js\"></script>\n    <script src=\"task1.js\"></script>\n    <script>\n      // Функция для генерации оглавления\n      function generateTableOfContents() {\n        const toc = document.getElementById(\"toc\");\n        const headings = document.querySelectorAll(\"h2, h3, h4\");\n        const ul = document.createElement(\"ul\");\n\n        headings.forEach((heading, index) => {\n          // Пропускаем заголовки из прогресса обучения\n          if (heading.closest(\".progress-card\")) {\n            return;\n          }\n\n          // Пропускаем заголовок самого оглавления\n          if (heading.parentElement.classList.contains(\"table-of-contents\")) {\n            return;\n          }\n\n          // Создаем уникальный id для заголовка, если его нет\n          if (!heading.id) {\n            heading.id = `heading-${index}`;\n          }\n\n          const li = document.createElement(\"li\");\n          const a = document.createElement(\"a\");\n\n          a.href = `#${heading.id}`;\n          a.textContent = heading.textContent;\n          a.classList.add(`toc-${heading.tagName.toLowerCase()}`);\n\n          // Добавляем обработчик клика для плавного скролла\n          a.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            const targetHeading = document.getElementById(heading.id);\n            const targetSection =\n              targetHeading.closest(\".card\") ||\n              targetHeading.closest(\"section\");\n\n            // Добавляем отступ при скролле\n            window.scrollTo({\n              top: targetHeading.offsetTop - 100, // 100px отступ сверху\n              behavior: \"smooth\",\n            });\n\n            // Добавляем подсветку всего блока\n            if (targetSection) {\n              targetSection.classList.add(\"highlight-section\");\n              setTimeout(() => {\n                targetSection.classList.remove(\"highlight-section\");\n              }, 2000);\n            }\n          });\n\n          li.appendChild(a);\n          ul.appendChild(li);\n        });\n\n        toc.appendChild(ul);\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        generateTableOfContents();\n      });\n\n      // Функция для загрузки прогресса\n      async function loadProgress() {\n        try {\n          // Сначала пробуем загрузить из progress.json\n          const response = await fetch(\"progress.json\");\n          if (response.ok) {\n            const data = await response.json();\n            return data;\n          }\n        } catch (error) {\n          console.log(\n            \"Не удалось загрузить progress.json, используем localStorage\"\n          );\n        }\n\n        // Если не удалось загрузить из JSON, берем из localStorage\n        const savedProgress = localStorage.getItem(\"learningProgress\");\n        if (savedProgress) {\n          return JSON.parse(savedProgress);\n        }\n\n        // Если нигде нет данных, возвращаем пустой объект\n        return {};\n      }\n\n      // Функция для сохранения прогресса\n      function saveProgress(progress) {\n        localStorage.setItem(\"learningProgress\", JSON.stringify(progress));\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", async () => {\n        const progress = await loadProgress();\n\n        // Отмечаем изученные темы\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        checkboxes.forEach((checkbox) => {\n          const topic = checkbox.dataset.topic;\n          if (progress[topic]) {\n            checkbox.checked = true;\n          }\n\n          checkbox.addEventListener(\"change\", () => {\n            progress[topic] = checkbox.checked;\n            saveProgress(progress);\n            updateProgress();\n          });\n        });\n\n        updateProgress();\n      });\n\n      // Обновление процента прогресса\n      function updateProgress() {\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        const total = checkboxes.length;\n        const checked = Array.from(checkboxes).filter(\n          (cb) => cb.checked\n        ).length;\n        const percentage = Math.round((checked / total) * 100);\n\n        const progressInfo = document.querySelector(\".progress-info\");\n        if (progressInfo) {\n          progressInfo.innerHTML = `\n            <div class=\"progress-percentage\">${percentage}%</div>\n            <div>изучено</div>\n          `;\n        }\n      }\n\n      // Инициализация подсветки кода\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        document.querySelectorAll(\"pre code\").forEach((block) => {\n          hljs.highlightBlock(block);\n        });\n      });\n\n      // Работа с дневником\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const saveButton = document.getElementById(\"saveEntry\");\n        const dateInput = document.getElementById(\"entryDate\");\n        const contentInput = document.getElementById(\"entryContent\");\n        const historyContainer = document.getElementById(\"diaryHistory\");\n\n        // Установка текущей даты\n        const today = new Date().toISOString().split(\"T\")[0];\n        dateInput.value = today;\n\n        // Загрузка истории из localStorage\n        function loadHistory() {\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          historyContainer.innerHTML = \"\";\n\n          history\n            .sort((a, b) => new Date(b.date) - new Date(a.date))\n            .forEach((entry) => {\n              const entryElement = document.createElement(\"div\");\n              entryElement.className = \"history-entry\";\n              entryElement.innerHTML = `\n                    <div class=\"history-date\">${new Date(\n                      entry.date\n                    ).toLocaleDateString()}</div>\n                    <div class=\"history-content\">${entry.content}</div>\n                  `;\n              historyContainer.appendChild(entryElement);\n            });\n        }\n\n        // Сохранение записи\n        saveButton.addEventListener(\"click\", () => {\n          const date = dateInput.value;\n          const content = contentInput.value;\n\n          if (!content.trim()) {\n            alert(\"Пожалуйста, введите текст записи\");\n            return;\n          }\n\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          history.push({ date, content });\n          localStorage.setItem(\"diaryHistory\", JSON.stringify(history));\n\n          contentInput.value = \"\";\n          loadHistory();\n        });\n\n        // Экспорт дневника\n        const exportButton = document.getElementById(\"exportDiary\");\n        if (exportButton) {\n          exportButton.addEventListener(\"click\", () => {\n            const history = localStorage.getItem(\"diaryHistory\") || \"[]\";\n            const progress = localStorage.getItem(\"learningProgress\") || \"{}\";\n\n            const data = {\n              diary: JSON.parse(history),\n              progress: JSON.parse(progress),\n            };\n\n            const blob = new Blob([JSON.stringify(data, null, 2)], {\n              type: \"application/json\",\n            });\n            const url = URL.createObjectURL(blob);\n\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = \"learning_data.json\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n          });\n        }\n\n        loadHistory();\n      });\n\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const filesList = document.querySelector(\".files-tree\");\n        const fileContent = document.getElementById(\"file-code\");\n        const currentFileName = document.getElementById(\"current-file\");\n\n        // Объект с содержимым файлов для GitHub Pages\n        const filesContent = {\n          \"test.js\": `// function delay(ms) {\n            return new Promise(function (resolve) {\n              console.log(1); //обработка промиса\n              setTimeout(resolve, ms);\n            });\n          }\n\n          function delay2(ms, func) {\n            return new Promise(function (resolve) {\n              setTimeout(\n                function () {\n                  console.log(2);\n                  resolve(func()); //вызов функции выполнение которой задерживается\n                },\n                ms\n              );\n            });\n          }\n\n          // ... остальное содержимое test.js`,\n\n          \"styles.css\": `:root {\n            --primary-color: #2c3e50;\n            --secondary-color: #3498db;\n            --background-color: #f5f6fa;\n            --card-background: #ffffff;\n            --text-color: #2c3e50;\n            --code-background: #f8f9fa;\n          }\n\n          // ... остальное содержимое styles.css`,\n\n          \"task1.js\": `// Содержимое task1.js`,\n          \"difference.js\": `// Содержимое difference.js`,\n          \"isEqual.js\": `// Содержимое isEqual.js`,\n          \"isEqual1.js\": `// Содержимое isEqual1.js`,\n          \"proto.js\": `// Содержимое proto.js`,\n          \"sortedUniq.js\": `// Содержимое sortedUniq.js`,\n          \"sortedUniq1.js\": `// Содержимое sortedUniq1.js`,\n          \"task3.js\": `// Содержимое task3.js`,\n          \"task4.js\": `// Содержимое task4.js`,\n          \"index.html\": `<!DOCTYPE html>\n<html lang=\"ru\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Основы JavaScript</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css\"\n    />\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n    <script>\n      hljs.highlightAll();\n    </script>\n    <script src=\"completed-topics.js\"></script>\n    <script src=\"task1.js\"></script>\n    <script>\n      // Функция для генерации оглавления\n      function generateTableOfContents() {\n        const toc = document.getElementById(\"toc\");\n        const headings = document.querySelectorAll(\"h2, h3, h4\");\n        const ul = document.createElement(\"ul\");\n\n        headings.forEach((heading, index) => {\n          // Пропускаем заголовки из прогресса обучения\n          if (heading.closest(\".progress-card\")) {\n            return;\n          }\n\n          // Пропускаем заголовок самого оглавления\n          if (heading.parentElement.classList.contains(\"table-of-contents\")) {\n            return;\n          }\n\n          // Создаем уникальный id для заголовка, если его нет\n          if (!heading.id) {\n            heading.id = `heading-${index}`;\n          }\n\n          const li = document.createElement(\"li\");\n          const a = document.createElement(\"a\");\n\n          a.href = `#${heading.id}`;\n          a.textContent = heading.textContent;\n          a.classList.add(`toc-${heading.tagName.toLowerCase()}`);\n\n          // Добавляем обработчик клика для плавного скролла\n          a.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            const targetHeading = document.getElementById(heading.id);\n            const targetSection =\n              targetHeading.closest(\".card\") ||\n              targetHeading.closest(\"section\");\n\n            // Добавляем отступ при скролле\n            window.scrollTo({\n              top: targetHeading.offsetTop - 100, // 100px отступ сверху\n              behavior: \"smooth\",\n            });\n\n            // Добавляем подсветку всего блока\n            if (targetSection) {\n              targetSection.classList.add(\"highlight-section\");\n              setTimeout(() => {\n                targetSection.classList.remove(\"highlight-section\");\n              }, 2000);\n            }\n          });\n\n          li.appendChild(a);\n          ul.appendChild(li);\n        });\n\n        toc.appendChild(ul);\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        generateTableOfContents();\n      });\n\n      // Функция для загрузки прогресса\n      async function loadProgress() {\n        try {\n          // Сначала пробуем загрузить из progress.json\n          const response = await fetch(\"progress.json\");\n          if (response.ok) {\n            const data = await response.json();\n            return data;\n          }\n        } catch (error) {\n          console.log(\n            \"Не удалось загрузить progress.json, используем localStorage\"\n          );\n        }\n\n        // Если не удалось загрузить из JSON, берем из localStorage\n        const savedProgress = localStorage.getItem(\"learningProgress\");\n        if (savedProgress) {\n          return JSON.parse(savedProgress);\n        }\n\n        // Если нигде нет данных, возвращаем пустой объект\n        return {};\n      }\n\n      // Функция для сохранения прогресса\n      function saveProgress(progress) {\n        localStorage.setItem(\"learningProgress\", JSON.stringify(progress));\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", async () => {\n        const progress = await loadProgress();\n\n        // Отмечаем изученные темы\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        checkboxes.forEach((checkbox) => {\n          const topic = checkbox.dataset.topic;\n          if (progress[topic]) {\n            checkbox.checked = true;\n          }\n\n          checkbox.addEventListener(\"change\", () => {\n            progress[topic] = checkbox.checked;\n            saveProgress(progress);\n            updateProgress();\n          });\n        });\n\n        updateProgress();\n      });\n\n      // Обновление процента прогресса\n      function updateProgress() {\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        const total = checkboxes.length;\n        const checked = Array.from(checkboxes).filter(\n          (cb) => cb.checked\n        ).length;\n        const percentage = Math.round((checked / total) * 100);\n\n        const progressInfo = document.querySelector(\".progress-info\");\n        if (progressInfo) {\n          progressInfo.innerHTML = `\n            <div class=\"progress-percentage\">${percentage}%</div>\n            <div>изучено</div>\n          `;\n        }\n      }\n\n      // Инициализация подсветки кода\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        document.querySelectorAll(\"pre code\").forEach((block) => {\n          hljs.highlightBlock(block);\n        });\n      });\n\n      // Работа с дневником\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const saveButton = document.getElementById(\"saveEntry\");\n        const dateInput = document.getElementById(\"entryDate\");\n        const contentInput = document.getElementById(\"entryContent\");\n        const historyContainer = document.getElementById(\"diaryHistory\");\n\n        // Установка текущей даты\n        const today = new Date().toISOString().split(\"T\")[0];\n        dateInput.value = today;\n\n        // Загрузка истории из localStorage\n        function loadHistory() {\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          historyContainer.innerHTML = \"\";\n\n          history\n            .sort((a, b) => new Date(b.date) - new Date(a.date))\n            .forEach((entry) => {\n              const entryElement = document.createElement(\"div\");\n              entryElement.className = \"history-entry\";\n              entryElement.innerHTML = `\n                    <div class=\"history-date\">${new Date(\n                      entry.date\n                    ).toLocaleDateString()}</div>\n                    <div class=\"history-content\">${entry.content}</div>\n                  `;\n              historyContainer.appendChild(entryElement);\n            });\n        }\n\n        // Сохранение записи\n        saveButton.addEventListener(\"click\", () => {\n          const date = dateInput.value;\n          const content = contentInput.value;\n\n          if (!content.trim()) {\n            alert(\"Пожалуйста, введите текст записи\");\n            return;\n          }\n\n          const history = JSON.parse(\n            localStorage.getItem(\"diaryHistory\") || \"[]\"\n          );\n          history.push({ date, content });\n          localStorage.setItem(\"diaryHistory\", JSON.stringify(history));\n\n          contentInput.value = \"\";\n          loadHistory();\n        });\n\n        // Экспорт дневника\n        const exportButton = document.getElementById(\"exportDiary\");\n        if (exportButton) {\n          exportButton.addEventListener(\"click\", () => {\n            const history = localStorage.getItem(\"diaryHistory\") || \"[]\";\n            const progress = localStorage.getItem(\"learningProgress\") || \"{}\";\n\n            const data = {\n              diary: JSON.parse(history),\n              progress: JSON.parse(progress),\n            };\n\n            const blob = new Blob([JSON.stringify(data, null, 2)], {\n              type: \"application/json\",\n            });\n            const url = URL.createObjectURL(blob);\n\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = \"learning_data.json\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n          });\n        }\n\n        loadHistory();\n      });\n\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const filesList = document.querySelector(\".files-tree\");\n        const fileContent = document.getElementById(\"file-code\");\n        const currentFileName = document.getElementById(\"current-file\");\n\n        // Объект с содержимым файлов для GitHub Pages\n        const filesContent = {\n          \"test.js\": `// function delay(ms) {\n            return new Promise(function (resolve) {\n              console.log(1); //обработка промиса\n              setTimeout(resolve, ms);\n            });\n          }\n\n          function delay2(ms, func) {\n            return new Promise(function (resolve) {\n              setTimeout(\n                function () {\n                  console.log(2);\n                  resolve(func()); //вызов функции выполнение которой задерживается\n                },\n                ms\n              );\n            });\n          }\n\n          // ... остальное содержимое test.js`,\n\n          \"styles.css\": `:root {\n            --primary-color: #2c3e50;\n            --secondary-color: #3498db;\n            --background-color: #f5f6fa;\n            --card-background: #ffffff;\n            --text-color: #2c3e50;\n            --code-background: #f8f9fa;\n          }\n\n          // ... остальное содержимое styles.css`,\n\n          \"task1.js\": `// Содержимое task1.js`,\n          \"difference.js\": `// Содержимое difference.js`,\n          \"isEqual.js\": `// Содержимое isEqual.js`,\n          \"isEqual1.js\": `// Содержимое isEqual1.js`,\n          \"proto.js\": `// Содержимое proto.js`,\n          \"sortedUniq.js\": `// Содержимое sortedUniq.js`,\n          \"sortedUniq1.js\": `// Содержимое sortedUniq1.js`,\n          \"task3.js\": `// Содержимое task3.js`,\n          \"task4.js\": `// Содержимое task4.js`,\n          \"index.html\": `<!DOCTYPE html>\n<html lang=\"ru\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Основы JavaScript</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css\"\n    />\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n    <script>\n      hljs.highlightAll();\n    </script>\n    <script src=\"completed-topics.js\"></script>\n    <script src=\"task1.js\"></script>\n    <script>\n      // Функция для генерации оглавления\n      function generateTableOfContents() {\n        const toc = document.getElementById(\"toc\");\n        const headings = document.querySelectorAll(\"h2, h3, h4\");\n        const ul = document.createElement(\"ul\");\n\n        headings.forEach((heading, index) => {\n          // Пропускаем заголовки из прогресса обучения\n          if (heading.closest(\".progress-card\")) {\n            return;\n          }\n\n          // Пропускаем заголовок самого оглавления\n          if (heading.parentElement.classList.contains(\"table-of-contents\")) {\n            return;\n          }\n\n          // Создаем уникальный id для заголовка, если его нет\n          if (!heading.id) {\n            heading.id = `heading-${index}`;\n          }\n\n          const li = document.createElement(\"li\");\n          const a = document.createElement(\"a\");\n\n          a.href = `#${heading.id}`;\n          a.textContent = heading.textContent;\n          a.classList.add(`toc-${heading.tagName.toLowerCase()}`);\n\n          // Добавляем обработчик клика для плавного скролла\n          a.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            const targetHeading = document.getElementById(heading.id);\n            const targetSection =\n              targetHeading.closest(\".card\") ||\n              targetHeading.closest(\"section\");\n\n            // Добавляем отступ при скролле\n            window.scrollTo({\n              top: targetHeading.offsetTop - 100, // 100px отступ сверху\n              behavior: \"smooth\",\n            });\n\n            // Добавляем подсветку всего блока\n            if (targetSection) {\n              targetSection.classList.add(\"highlight-section\");\n              setTimeout(() => {\n                targetSection.classList.remove(\"highlight-section\");\n              }, 2000);\n            }\n          });\n\n          li.appendChild(a);\n          ul.appendChild(li);\n        });\n\n        toc.appendChild(ul);\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        generateTableOfContents();\n      });\n\n      // Функция для загрузки прогресса\n      async function loadProgress() {\n        try {\n          // Сначала пробуем загрузить из progress.json\n          const response = await fetch(\"progress.json\");\n          if (response.ok) {\n            const data = await response.json();\n            return data;\n          }\n        } catch (error) {\n          console.log(\n            \"Не удалось загрузить progress.json, используем localStorage\"\n          );\n        }\n\n        // Если не удалось загрузить из JSON, берем из localStorage\n        const savedProgress = localStorage.getItem(\"learningProgress\");\n        if (savedProgress) {\n          return JSON.parse(savedProgress);\n        }\n\n        // Если нигде нет данных, возвращаем пустой объект\n        return {};\n      }\n\n      // Функция для сохранения прогресса\n      function saveProgress(progress) {\n        localStorage.setItem(\"learningProgress\", JSON.stringify(progress));\n      }\n\n      // Инициализация при загрузке страницы\n      document.addEventListener(\"DOMContentLoaded\", async () => {\n        const progress = await loadProgress();\n\n        // Отмечаем изученные темы\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        checkboxes.forEach((checkbox) => {\n          const topic = checkbox.dataset.topic;\n          if (progress[topic]) {\n            checkbox.checked = true;\n          }\n\n          checkbox.addEventListener(\"change\", () => {\n            progress[topic] = checkbox.checked;\n            saveProgress(progress);\n            updateProgress();\n          });\n        });\n\n        updateProgress();\n      });\n\n      // Обновление процента прогресса\n      function updateProgress() {\n        const checkboxes = document.querySelectorAll(\n          'input[type=\"checkbox\"][data-topic]'\n        );\n        const total = checkboxes.length;\n        const checked = Array.from(checkboxes).filter(\n          (cb) => cb.checked\n        ).length;\n        const percentage = Math.round((checked / total) * 100);\n\n        const progressInfo = document.querySelector(\".progress-info\");\n        if (progressInfo) {\n          progressInfo.innerHTML = `\n            <div class=\"progress-percentage\">${percentage}%</div>\n            <div>изучено</div>\n          `;\n        }\n      }\n\n      // Инициализация подсветки кода\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        document.querySelectorAll(\"pre code\").forEach((block) => {\n          hljs.highlightBlock(block);\n        });\n      });\n"
};