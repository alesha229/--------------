Мы можем объявить переменные для хранения данных с помощью ключевых слов var, let или const.

let – это современный способ объявления.
var – это устаревший способ объявления. Обычно мы вообще не используем его, но мы рассмотрим тонкие отличия от let в главе Устаревшее ключевое слово "var" на случай, если это всё-таки вам понадобится.
const – похоже на let, но значение переменной не может изменяться.
Переменные должны быть названы таким образом, чтобы мы могли легко понять, что у них внутри.

 JavaScript есть 8 основных типов данных.

Семь из них называют «примитивными» типами данных:
number для любых чисел: целочисленных или чисел с плавающей точкой; целочисленные значения ограничены диапазоном ±(253-1).
bigint для целых чисел произвольной длины.
string для строк. Строка может содержать ноль или больше символов, нет отдельного символьного типа.
boolean для true/false.
null для неизвестных значений – отдельный тип, имеющий одно значение null.
undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
symbol для уникальных идентификаторов.
И один не является «примитивным» и стоит особняком:
object для более сложных структур данных.
массивы тоже считаются ссылочными типами


Оператор typeof позволяет нам увидеть, какой тип данных сохранён в переменной.



Имеет две формы: typeof x или typeof(x).
Возвращает строку с именем типа. Например, "string".
Для null возвращается "object" – это ошибка в языке, на самом деле это не объект.
В следующих главах мы сконцентрируемся на примитивных значениях, а когда познакомимся с ними, перейдём к объектам.


Стрелочные функции:

Не имеют this.
Не имеют arguments.
Не могут быть вызваны с new.

await — это оператор, который используется внутри асинхронной функции для ожидания выполнения промиса.
 Он приостанавливает выполнение функции до тех пор, пока промис не будет выполнен (разрешен или отклонен).




Давайте разберем основные принципы ООП (Объектно-ориентированного программирования):
Инкапсуляция - объединение данных и методов для работы с ними в единый объект и скрытие деталей реализации. Пример:


class BankAccount {
    #balance = 0; // приватное свойство
    
    constructor(initialBalance) {
        this.#balance = initialBalance;
    }
    
    deposit(amount) {
        if (amount > 0) {
            this.#balance += amount;
            return true;
        }
        return false;
    }
    
    getBalance() {
        return this.#balance;
    }
}

Наследование - возможность создать новый класс на основе существующего. Пример:
class Animal {
    constructor(name) {
        this.name = name;
    }
    
    speak() {
        console.log(`${this.name} издает звук`);
    }
}

class Dog extends Animal {
    speak() {
        console.log(`${this.name} говорит: Гав!`);
    }
}
Полиморфизм - возможность использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта. Пример:
class Shape {
    area() {
        return 0;
    }
}

class Circle extends Shape {
    constructor(radius) {
        super();
        this.radius = radius;
    }
    
    area() {
        return Math.PI * this.radius * this.radius;
    }
}

class Rectangle extends Shape {
    constructor(width, height) {
        super();
        this.width = width;
        this.height = height;
    }
    
    area() {
        return this.width * this.height;
    }
}

Абстракция - выделение главных характеристик объекта, исключая незначительные. Создание простых, понятных интерфейсов для работы со сложными системами.